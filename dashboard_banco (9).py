import streamlit
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import numpy as np
import squarify # Importa a biblioteca squarify para criar o mapa de √°rvore
import matplotlib.colors as mcolors # Para gerar uma paleta de cores

from sklearn.preprocessing import LabelEncoder, OrdinalEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from scipy.stats import chi2_contingency 

# --- Configura√ß√µes da P√°gina ---
st.set_page_config(
    page_title="Avalia√ß√£o das Caracter√≠sticas Sociais, Educacionais e de Sa√∫de das Pessoas com S√≠ndrome de Down no Brasil",
    page_icon="üß†",
    layout="wide"
)

# --- Fun√ß√£o de Carregamento de Dados (com cache) ---
@st.cache_data
def load_data():
    try:
        # Please adjust this path
        #df = pd.read_excel('C:/Users/ellen/Downloads/Banco_SD.xlsx')
        df = pd.read_excel('C:/Users/Emille/Documents/UNIFESP/MAT√âRIAS/T√≥picos em Ci√™ncia de Dados para Neuroci√™ncia/Projeto5/Banco_SD.xlsx')
        return df
    except FileNotFoundError:
        st.error("Erro: O arquivo 'Banco_SD.xlsx' n√£o foi encontrado.")
        st.info("Por favor, verifique se o nome do arquivo e o caminho est√£o corretos.")
        st.stop()
    except Exception as e:
        st.error(f"Ocorreu um erro ao carregar os dados: {e}")
        st.stop()

# --- Aplica estilos CSS globais ---
st.markdown("""
<style>
.justified-text {
    text-align: justify;
}
.variable-list-container ul {
    list-style-type: disc;
    padding-left: 20px;
}
.variable-list-container li {
    margin-bottom: 5px;
}
</style>
""", unsafe_allow_html=True)

# --- Fun√ß√£o principal que cria o dashboard ---
def create_dashboard(df_original):
    if not df_original.empty:
        st.title("Avalia√ß√£o das Caracter√≠sticas Sociais, Educacionais e de Sa√∫de das Pessoas com S√≠ndrome de Down no Brasil")

        # --- Abas com t√≠tulos mais curtos ---
        tab1, tab2, tab3, tab4, tab5, tab6, tab7, tab8, tab9, tab10 = st.tabs([
            "1. Contexto",             # Shortened
            "2. Dados",                # Shortened
            "3. Sociodemogr√°ficas",
            "4. Educacionais",
            "5. Sa√∫de e Estilo de Vida",         # Shortened
            "6. Participa√ß√£o, Autonomia e Social",  # Shortened
            "7. Correla√ß√µes",
            "8. PCA e Cluster",
            "9. Modelos ML",           # Shortened (Machine Learning Models)
            "10. Discuss√£o"            # Shortened
        ])

        # --- Sidebar para filtros ---
        df_filtrado = df_original.copy()


        # --- Sidebar com Sum√°rio das Abas ---
        st.sidebar.header("üìã Sum√°rio das Abas")
        
        with st.sidebar.expander("1Ô∏è‚É£ Contexto e Objetivo"):
            st.header("Contexto do Estudo")
            st.subheader("- Estudo sobre Avalia√ß√£o das Caracter√≠sticas Sociais, Educacionais e de Sa√∫de das Pessoas com S√≠ndrome de Down no Brasil")
            st.subheader("- S√≠ndrome de Down")
            st.subheader("- Panorama no Brasil")
            st.subheader("- Objetivo")
        
        with st.sidebar.expander("2Ô∏è‚É£ Apresenta√ß√£o dos Dados"):
            st.header("Dados Gerais")
            st.subheader(f"- Total de participantes: {len(df_filtrado)}")
            st.subheader("- Per√≠odo de coleta: [setembro de 2024 - atual]")
            st.subheader("- Regi√µes abrangidas: [18 Estados] AC, AL, BA, CE, ES, GO, MA, MT, MG, PB, PR, PE, PI, RJ, RN, RS, SC e SP) mais o Distrito Federal. ")
            
            st.header("Vari√°veis Principais")
            st.subheader("- 159 colunas e 368 linhas")
            st.subheader("- Dados quantitativos e qualitativos")
            st.subheader("- Blocos tem√°ticos de an√°lise")
        
        with st.sidebar.expander("3Ô∏è‚É£ Sociodemogr√°ficas"):
            st.header("Principais An√°lises e Gr√°ficos")
            st.subheader("- Distribui√ß√£o por cor/etnia")
            st.subheader("- Quantos irm√£os o participante possui")
            st.subheader("- Distribui√ß√£o da renda familiar")
            st.subheader("- Recebe Bolsa fam√≠lia")
            st.subheader("- Recebe Benef√≠cio de Presta√ß√£o Continuada")
            st.subheader("- Distribui√ß√£o do tipo de moradia")
            st.subheader("- Distribui√ß√£o por Faixa Et√°ria")
        
        with st.sidebar.expander("4Ô∏è‚É£ Educacionais"):
            st.header("Principais An√°lises e Gr√°ficos")
            st.subheader("- N√≠vel de Escolaridade do Participante")
            st.subheader("- N√≠vel de Escolaridade do Respons√°vel")
            st.subheader("- O Participante √© Alfabetizado?")
            st.subheader("- O Participante Sabe Ler?")
            st.subheader("- O Participante Sabe Escrever?")
            st.subheader("- O Participante consegue interpretar texto?")
            
        with st.sidebar.expander("5Ô∏è‚É£ Sa√∫de e Estilo de Vida"):
            st.header("Principais An√°lises e Gr√°ficos")
            st.subheader("- Distribui√ß√£o do IMC por Sexo (%)")
            st.subheader("- Idade em que a m√£e do participante teve a gesta√ß√£o")
            st.subheader("- Rede de Acompanhamento Pr√©-natal da M√£e")
            st.subheader("- Quando o Diagn√≥stico do Participante foi Realizado")
            st.subheader("- Foi feito o cari√≥tipo?")
            st.subheader("- Irm√£os do participante possuem alguma defici√™ncia?")
            st.subheader("- Sa√∫de Geral do Participante (Percep√ß√£o do Cuidador)")
            st.subheader("- Rede de Acompanhamento Psicol√≥gico")
            st.subheader("- Rede de Estimula√ß√£o Precoce")
            st.subheader("- Rede de Acompanhamento com Cl√≠nico Geral")
            st.subheader("- Rede de Acompanhamento com Dentista")
            st.subheader("- Rede de Acompanhamento com Nutricionista")
            st.subheader("- Rede de Acompanhamento com Oftalmologista")
            st.subheader("- Distribui√ß√£o de Diagn√≥sticos Psicol√≥gicos")
            st.subheader("- Distribui√ß√£o de Imuniza√ß√µes (Vacinas)")
            st.subheader("- Preval√™ncia de Morbidades e/ou Doen√ßas")
            st.subheader("- Doen√ßas Apesar das Imuniza√ß√µes")
            st.subheader("- Gravidade da COVID")
            st.subheader("- Distribui√ß√£o de Doses de Vacina COVID-19")
            st.subheader("- Medica√ß√µes Utilizadas pelos Participantes")
            st.subheader("- Pr√°tica de Atividade F√≠sica")
            st.subheader("- Frequ√™ncia Semanal de Atividade F√≠sica")
            st.subheader("- H√°bitos Alimentares Saud√°veis")
            st.subheader("- Atendimento de Sa√∫de P√∫blico Adequado")
        
        with st.sidebar.expander("6Ô∏è‚É£ Participa√ß√£o, Autonomia e Social"):
            st.header("Principais An√°lises e Gr√°ficos")
            st.subheader("- Autonomia para Tomar Decis√µes")
            st.subheader("- Deslocamento Independente")
            st.subheader("- Realiza√ß√£o de Necessidades Pessoais")
            st.subheader("- Relacionamento Interpessoal")
            st.subheader("- Intera√ß√£o Social Volunt√°ria")
            st.subheader("- Olhar do Cuidador Quanto a Tratamento com Respeito, Dignidade e Igualdade")
        
        with st.sidebar.expander("7Ô∏è‚É£ Correla√ß√µes"):
            st.header("Correla√ß√µes")
            st.subheader("- Correla√ß√£o de Vari√°veis Socioecon√¥micas")
            st.subheader("- Correla√ß√£o de Escolaridade e Alfabetiza√ß√£o")
            st.subheader("- Correla√ß√£o de Vari√°veis Demogr√°ficas e de Sa√∫de")
        
        with st.sidebar.expander("8Ô∏è‚É£ PCA e Cluster"):
            st.header("Redu√ß√£o de dimensionalidade e clusteriza√ß√£o")
            st.subheader("- Pr√©-precessamento de dados")
            st.subheader("- Visualiza√ß√£o dos Clusters (PCA)")
            st.subheader("- M√©dias por Cluster")
            st.subheader("- Distribui√ß√£o de Atividade F√≠sica por Cluster")
            st.subheader("- Estat√≠sticas Detalhadas de Atividade F√≠sica por Cluster")
            st.subheader("- Percep√ß√£o de Atendimento de Sa√∫de por Cluster")
        
        with st.sidebar.expander("9Ô∏è‚É£ Regress√£o e Random Forest"):
            st.header("T√©cnicas Utilizadas")
            
            st.header("Considera√ß√µes")
            st.subheader("- Limita√ß√µes do estudo")
            st.subheader("- Sugest√µes para pesquisas futuras")

        with st.sidebar.expander("üîü Discuss√£o"):
            st.header("Discuss√£o e Conslus√£o")
            st.subheader("- Refer√™ncias")
            st.subheader("- Recomenda√ß√µes pol√≠ticas")
            
            st.header("Considera√ß√µes")
            st.subheader("- Limita√ß√µes do estudo")
            st.subheader("- Sugest√µes para pesquisas futuras")
            
        # --- CONTE√öDO DA ABA 1: Contexto e Objetivo ---
        with tab1:
            st.header("Contexto do Estudo")
            st.image("Image1.jpg", width=1000)
            st.image("Image2.jpg", width=1000)

        # --- CONTE√öDO DA ABA 2: Apresenta√ß√£o dos Dados ---
        with tab2:
            st.header("Apresenta√ß√£o dos Dados")

            st.markdown("""
            <div class="justified-text">
            O banco possui vari√°veis quantitativas e qualitativas com dados socioecon√¥mico, demogr√°fico, educacional e de sa√∫de. O tipo de vari√°vel poder√° ser visto no documento compartilhado em uma planilha no formato xlsx onde consta os dados e o dicion√°rio.
            </div>
            """, unsafe_allow_html=True)

            st.markdown("""
            <div class="justified-text">
            Al√©m disso, o banco possui 159 colunas e 368 linhas (contando com a primeira coluna e linha que s√£o identifica√ß√£o (ID) e perguntas, respectivamente). Detalhes do banco podem ser vistos na planilha em formato xlsx.
            </div>
            """, unsafe_allow_html=True)

            st.markdown("""
            <div class="justified-text">
            As vari√°veis selecioandas para an√°lise descritiva ser√£o apresentadas nas abas (4 blocos) seguintes. Cada aba apresenta um "bloco" de vari√°veis agrupadas com caracter√≠sticas semelhantes: "Caracter√≠sticas Sociodemogr√°ficas", "Caracter√≠sticas Educacionais", "Caracter√≠sticas de Sa√∫de e Estilo de Vida" e "Caracter√≠sticas de Participa√ß√£o, Autonomia e Intera√ß√£o Social".s
            </div>
            """, unsafe_allow_html=True)

            st.header("Vari√°veis")

            st.markdown("""
            <div class="variable-list-container">
                <ul>
                    <li>ID</li>
                    <li>Institui√ß√£o</li>
                    <li>Data de nascimento</li>
                    <li>Idade do participante</li>
                    <li>Cidade</li>
                    <li>Naturalidade</li>
                    <li>Cuidador principal</li>
                    <li>Idade do cuidador principal</li>
                    <li>Peso do participante</li>
                    <li>IMC</li>
                    <li>Classifica√ß√£o do IMC</li>
                    <li>Peso do cuidador principal</li>
                    <li>Altura</li>
                    <li>Altura do cuidador principal</li>
                    <li>Sexo do participante</li>
                    <li>Cor/etnia do participante</li>
                    <li>Possui alguma defici√™ncia</li>
                    <li>Se na pergunta anterior for selecionado outra DI, escreve qual</li>
                    <li>CID do participante</li>
                    <li>O participante foi adotado</li>
                    <li>Idade que a m√£e do participante teve a gesta√ß√£o</li>
                    <li>A m√£e do participante realizou o acompanhamento pr√©-natal</li>
                    <li>Realizou o acompanhamento pr√©-natal na rede</li>
                    <li>O diagn√≥stico do participante foi realizado no</li>
                    <li>Foi feito o cari√≥tipo</li>
                    <li>O participante possui irm√£os</li>
                    <li>Quantos irm√£os o participante possui</li>
                    <li>Os irm√£os do participante possuem alguma defici√™ncia</li>
                    <li>Voc√™ considera que a sa√∫de do participante em geral √©</li>
                    <li>O participante realiza/realizou acompanhamento psicol√≥gico</li>
                    <li>Realiza/realizou na rede</li>
                    <li>Realizou algum programa de interven√ß√£o/estimula√ß√£o precoce</li>
                    <li>Realiza/realizou na rede</li>
                    <li>O participante faz acompanhamento com cl√≠nico geral</li>
                    <li>Se sim, o acompanhamento ocorre na rede</li>
                    <li>O participante faz acompanhamento com dentista</li>
                    <li>Se sim, o acompanhamento ocorre na rede</li>
                    <li>O participante faz acompanhamento com nutricionista</li>
                    <li>Se sim, o acompanhamento ocorre na rede</li>
                    <li>O participante faz acompanhamento com oftalmologista</li>
                    <li>Se sim, o acompanhamento ocorre na rede</li>
                    <li>Apresenta alguma das morbidades e/ou doen√ßas a seguir</li>
                    <li>Recebeu alguma das imuniza√ß√µes a seguir</li>
                    <li>Apesar das imuniza√ß√µes, teve alguma dessas doen√ßas</li>
                    <li>Teve Covid-19</li>
                    <li>Gravidade da COVID do participante</li>
                    <li>O participante ficou hospitalizado (na UTI) por conta da COVID</li>
                    <li>O participante precisou de suplementa√ß√£o de O2 por conta da COVID</li>
                    <li>Tomou a 1¬™ dose da COVID</li>
                    <li>Nome da vacina da 1¬™ dose da COVID</li>
                    <li>Data da 1¬™ dose da COVID</li>
                    <li>Tomou a 2¬™ dose da COVID</li>
                    <li>Nome da vacina da 2¬™ dose da COVID</li>
                    <li>Data da 2¬™ dose da COVID</li>
                    <li>Tomou a 3¬™ dose da COVID</li>
                    <li>Nome da vacina da 3¬™ dose da COVID</li>
                    <li>Data da 3¬™ dose da COVID</li>
                    <li>Tomou a 4¬™ dose da COVID</li>
                    <li>Nome da vacina da 4¬™ dose da COVID</li>
                    <li>Data da 4¬™ dose da COVID</li>
                    <li>Tomou a 5¬™ dose da COVID</li>
                    <li>Nome da vacina da 5¬™ dose da COVID</li>
                    <li>Data da 5¬™ dose da COVID</li>
                    <li>Tomou a 6¬™ dose da COVID</li>
                    <li>Nome da vacina da 6¬™ dose da COVID</li>
                    <li>Data da 6¬™ dose da COVID</li>
                    <li>O participante toma alguma dessas medica√ß√µes</li>
                    <li>O participante √© alfabetizado</li>
                    <li>Sabe ler</li>
                    <li>Sabe escrever</li>
                    <li>O participante consegue interpretar texto</li>
                    <li>O participante l√™ jornais, revista ou livros</li>
                    <li>N√≠vel de escolaridade do participante</li>
                    <li>N√≠vel de escolaridade do respons√°vel do participante</li>
                    <li>Renda familiar</li>
                    <li>Quantas pessoas vivem com esta renda familiar</li>
                    <li>Recebe Bolsa Fam√≠lia</li>
                    <li>Recebe BPC</li>
                    <li>A resid√™ncia √©</li>
                    <li>Pratica atividade f√≠sica ou esporte</li>
                    <li>Qual atividade f√≠sica o participante pratica</li>
                    <li>O participante pratica atividade f√≠sica ou esporte quantas vezes na semana</li>
                    <li>Por quanto tempo o participante pratica essa atividade f√≠sica e/ou esporte</li>
                    <li>Voc√™ considera que o participante possui autonomia para tomar decis√µes e tem a chance de escolher as coisas que deseja (escolher as coisas para a sua satisfa√ß√£o pessoal)</li>
                    <li>O participante se desloca independentemente pela cidade</li>
                    <li>O participante realiza alguma atividade art√≠stica</li>
                    <li>Na maioria das vezes, voc√™ considera o participante na realiza√ß√£o de suas necessidades pessoais como</li>
                    <li>Voc√™ considera que o participante se relaciona com diferentes pessoas, tem amigos e se d√° bem com as pessoas</li>
                    <li>Voc√™ considera que o participante, por vontade pr√≥pria interage socialmente, frequentando diferentes lugares da cidade ou do bairro</li>
                    <li>Voc√™ considera que o participante √© tratado com respeito, dignidade e igualdade pelas outras pessoas</li>
                    <li>Voc√™ considera que o participante possui h√°bitos alimentares saud√°veis</li>
                    <li>Voc√™ considera que o participante possui atendimento de sa√∫de adequado pelo sistema p√∫blico para atender suas necessidades</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)

        # --- ABA 3: Caracter√≠sticas Sociodemogr√°ficas (Gr√°ficos Matplotlib) ---
        with tab3:
            st.header("Caracter√≠sticas Sociodemogr√°ficas")

            # Primeira linha de gr√°ficos
            col1_row1, col2_row1 = st.columns(2)

            with col1_row1:
                st.subheader("Distribui√ß√£o por Cor/Etnia")
                if 'Cor/etnia do participante' in df_filtrado.columns and not df_filtrado.empty:
                    contagem = df_filtrado['Cor/etnia do participante'].value_counts()
                    total = contagem.sum()

                    fig, ax = plt.subplots(figsize=(7, 6)) # Ajuste no figsize para propor√ß√£o
                    bars = ax.bar(contagem.index, contagem.values, color='#bd928b', edgecolor='#bd928b')

                    for i, (categoria, valor) in enumerate(contagem.items()):
                        percentual = (valor / total) * 100
                        ax.text(i, valor + (total * 0.01), f'{percentual:.1f}%', ha='center', va='bottom', fontsize=9)

                    ax.set_title('Distribui√ß√£o por Cor/Etnia', fontsize=12)
                    ax.set_xlabel('Cor/Etnia do Participante', fontsize=10)
                    ax.set_ylabel('Frequ√™ncia', fontsize=10)
                    ax.tick_params(axis='x', rotation=45, labelsize=9)
                    ax.grid(axis='y', linestyle='--', alpha=0.5)
                    plt.tight_layout()
                    for spine in ax.spines.values(): # Manter bordas vis√≠veis
                        spine.set_visible(True)
                        spine.set_linewidth(1.2)
                    st.pyplot(fig, use_container_width=True) # Adicionado use_container_width
                    plt.close(fig)
                else:
                    st.warning("N√£o foi poss√≠vel gerar o gr√°fico de Cor/Etnia. Verifique se a coluna existe ou se o DataFrame est√° vazio ap√≥s os filtros.")

            with col2_row1:
                st.subheader("Quantos irm√£os o participante possui")
                if 'Quantos irm√£os o participante possui' in df_filtrado.columns and not df_filtrado.empty:
                    contagem = df_filtrado['Quantos irm√£os o participante possui'].value_counts()
                    total = contagem.sum()

                    fig, ax = plt.subplots(figsize=(7, 6)) # Ajuste no figsize para propor√ß√£o
                    bars = ax.barh(contagem.index.astype(str), contagem.values, color='#a1a6aa', edgecolor='#a1a6aa')

                    for i, (categoria, valor) in enumerate(contagem.items()):
                        percentual = (valor / total) * 100
                        ax.text(valor + (contagem.max() * 0.05), i, f'{percentual:.1f}%', va='center', fontsize=9)

                    ax.set_xlim(0, contagem.max() * 1.2)

                    ax.set_title('Quantos irm√£os o participante possui', fontsize=12)
                    ax.set_xlabel('Frequ√™ncia', fontsize=10)
                    ax.set_ylabel('N¬∫ de irm√£os', fontsize=10)
                    ax.grid(axis='x', linestyle='--', alpha=0.5)
                    plt.tight_layout()

                    for spine in ax.spines.values(): # Manter bordas vis√≠veis
                        spine.set_visible(True)
                        spine.set_linewidth(1.2)
                    st.pyplot(fig, use_container_width=True) # Adicionado use_container_width
                    plt.close(fig)
                else:
                    st.warning("N√£o foi poss√≠vel gerar o gr√°fico de 'Quantos irm√£os o participante possui'. Verifique a coluna.")


            # Segunda linha de gr√°ficos
            col1_row2, col2_row2 = st.columns(2)

            with col1_row2:
                st.subheader("Distribui√ß√£o da renda familiar")
                if 'Renda familiar' in df_filtrado.columns and not df_filtrado.empty:
                    contagem = df_filtrado['Renda familiar'].value_counts()
                    total = contagem.sum()

                    fig, ax = plt.subplots(figsize=(7, 6)) # Ajuste no figsize para propor√ß√£o
                    bars = ax.barh(contagem.index.astype(str), contagem.values, color='#ffab03', edgecolor='#ffab03')

                    for i, (categoria, valor) in enumerate(contagem.items()):
                        percentual = (valor / total) * 100
                        ax.text(valor + (contagem.max() * 0.05), i, f'{percentual:.1f}%', va='center', fontsize=9)

                    ax.set_xlim(0, contagem.max() * 1.2)

                    ax.set_title('Distribui√ß√£o da renda familiar', fontsize=12)
                    ax.set_xlabel('Frequ√™ncia', fontsize=10)
                    ax.set_ylabel('Renda', fontsize=10)
                    ax.grid(axis='x', linestyle='--', alpha=0.5)
                    plt.tight_layout()

                    for spine in ax.spines.values(): # Manter bordas vis√≠veis
                        spine.set_visible(True)
                        spine.set_linewidth(1.2)
                    st.pyplot(fig, use_container_width=True) # Adicionado use_container_width
                    plt.close(fig)
                else:
                    st.warning("N√£o foi poss√≠vel gerar o gr√°fico de 'Renda familiar'. Verifique a coluna.")

            with col2_row2:
                st.subheader("Recebe Bolsa fam√≠lia")
                if 'Recebe Bolsa fam√≠lia' in df_filtrado.columns and not df_filtrado.empty:
                    # Padronizar os valores na coluna
                    df_filtrado['Recebe Bolsa fam√≠lia'] = (
                        df_filtrado['Recebe Bolsa fam√≠lia']
                        .astype(str)
                        .str.lower()
                        .str.strip()
                    )
                    contagem = df_filtrado['Recebe Bolsa fam√≠lia'].value_counts()
                    total = contagem.sum()

                    ordem_desejada = ['n√£o', 'sim']
                    contagem = contagem.reindex(ordem_desejada).dropna()
                    labels_formatados = [s.capitalize() for s in contagem.index]

                    fig, ax = plt.subplots(figsize=(7, 6)) # Ajuste no figsize para propor√ß√£o
                    bars = ax.bar(labels_formatados, contagem.values, color='#e2aa87', edgecolor='#e2aa87')

                    for i, bar in enumerate(bars):
                        height = bar.get_height()
                        percentual = (height / total) * 100
                        ax.text(bar.get_x() + bar.get_width() / 2, height + (total * 0.01), f'{percentual:.1f}%',
                                ha='center', va='bottom', fontsize=9)

                    ax.set_title('Recebe Bolsa fam√≠lia', fontsize=12)
                    ax.set_xlabel('Resposta', fontsize=10)
                    ax.set_ylabel('Frequ√™ncia', fontsize=10)
                    ax.set_xticklabels(labels_formatados, rotation=0, ha='center', fontsize=10)
                    ax.grid(axis='y', linestyle='--', alpha=0.5)
                    plt.tight_layout()

                    for spine in ax.spines.values(): # Manter bordas vis√≠veis
                        spine.set_visible(True)
                        spine.set_linewidth(1.2)
                    st.pyplot(fig, use_container_width=True) # Adicionado use_container_width
                    plt.close(fig)
                else:
                    st.warning("N√£o foi poss√≠vel gerar o gr√°fico de 'Recebe Bolsa fam√≠lia'. Verifique a coluna.")

            # Terceira linha de gr√°ficos
            col1_row3, col2_row3 = st.columns(2)

            with col1_row3:
                st.subheader("Recebe Benef√≠cio de Presta√ß√£o Continuada")
                if 'Recebe BPC' in df_filtrado.columns and not df_filtrado.empty:
                    df_filtrado['Recebe BPC'] = (
                        df_filtrado['Recebe BPC']
                        .astype(str)
                        .str.lower()
                        .str.strip()
                    )
                    contagem = df_filtrado['Recebe BPC'].value_counts()
                    total = contagem.sum()

                    ordem_desejada = ['n√£o', 'sim']
                    contagem = contagem.reindex(ordem_desejada).dropna()
                    labels_formatados = [s.capitalize() for s in contagem.index]

                    fig, ax = plt.subplots(figsize=(7, 6)) # Ajuste no figsize para propor√ß√£o
                    bars = ax.bar(labels_formatados, contagem.values, color='#b6d4bb', edgecolor='#b6d4bb')

                    for i, bar in enumerate(bars):
                        height = bar.get_height()
                        percentual = (height / total) * 100
                        ax.text(bar.get_x() + bar.get_width() / 2, height + (total * 0.01), f'{percentual:.1f}%',
                                ha='center', va='bottom', fontsize=9)

                    ax.set_title('Recebe Benef√≠cio de Presta√ß√£o Continuada', fontsize=12)
                    ax.set_xlabel('Resposta', fontsize=10)
                    ax.set_ylabel('Frequ√™ncia', fontsize=10)
                    ax.set_xticklabels(labels_formatados, rotation=0, ha='center', fontsize=10)
                    ax.grid(axis='y', linestyle='--', alpha=0.5)
                    plt.tight_layout()

                    for spine in ax.spines.values(): # Manter bordas vis√≠veis
                        spine.set_visible(True)
                        spine.set_linewidth(1.2)
                    st.pyplot(fig, use_container_width=True) # Adicionado use_container_width
                    plt.close(fig)
                else:
                    st.warning("N√£o foi poss√≠vel gerar o gr√°fico de 'Recebe BPC'. Verifique a coluna.")

            with col2_row3:
                st.subheader("Distribui√ß√£o do tipo de moradia")
                if 'A resid√™ncia √©' in df_filtrado.columns and not df_filtrado.empty:
                    contagem = df_filtrado['A resid√™ncia √©'].value_counts()
                    total = contagem.sum()

                    fig, ax = plt.subplots(figsize=(7, 6)) # Ajuste no figsize para propor√ß√£o
                    bars = ax.barh(contagem.index.astype(str), contagem.values, color='#a4d9a3', edgecolor='#a4d9a3')

                    for i, (categoria, valor) in enumerate(contagem.items()):
                        percentual = (valor / total) * 100
                        ax.text(valor + (contagem.max() * 0.05), i, f'{percentual:.1f}%', va='center', fontsize=9)

                    ax.set_xlim(0, contagem.max() * 1.2)

                    ax.set_title('Distribui√ß√£o do tipo de moradia', fontsize=12)
                    ax.set_xlabel('Frequ√™ncia', fontsize=10)
                    ax.set_ylabel('Moradia', fontsize=10)
                    ax.grid(axis='x', linestyle='--', alpha=0.5)
                    plt.tight_layout()

                    for spine in ax.spines.values(): # Manter bordas vis√≠veis
                        spine.set_visible(True)
                        spine.set_linewidth(1.2)
                    st.pyplot(fig, use_container_width=True) # Adicionado use_container_width
                    plt.close(fig)
                else:
                    st.warning("N√£o foi poss√≠vel gerar o gr√°fico de 'A resid√™ncia √©'. Verifique a coluna.")
                    
            # Quarta linha de gr√°ficos
            col1_row4, col2_row4 = st.columns(2)
            # --- GR√ÅFICO DE DISTRIBUI√á√ÉO POR FAIXA ET√ÅRIA (ID√äNTICO √Ä AN√ÅLISE ORIGINAL) ---
            with col1_row4:  # Segunda coluna da primeira linha
                st.subheader("Distribui√ß√£o por Faixa Et√°ria")
                
                if 'Idade do participante' in df_filtrado.columns and not df_filtrado.empty:
                    # C√ìPIA FIEL DO PROCESSAMENTO DO SEU GR√ÅFICO SIMPLES
                    df_filtrado['Idade_num'] = pd.to_numeric(df_filtrado['Idade do participante'], errors='coerce')
                    
                    # USAR EXATAMENTE OS MESMOS PAR√ÇMETROS DO SEU C√ìDIGO ORIGINAL
                    bins = [0, 10, 19, 29, 39, 49, 59]
                    labels = ['5 meses a 10 anos', '11 anos a 19 anos', '20 anos a 29 anos',
                             '30 anos a 39 anos', '40 anos a 49 anos', '50 anos a 59 anos']
                    
                    # MESMA L√ìGICA DE CLASSIFICA√á√ÉO (com right=True)
                    df_filtrado['Faixa Et√°ria'] = pd.cut(
                        df_filtrado['Idade_num'],
                        bins=bins,
                        labels=labels,
                        right=True  # INCLUS√ÉO DO LIMITE SUPERIOR (igual ao seu c√≥digo)
                    )
                    
                    # MESMA CONTAGEM E ORDENA√á√ÉO
                    contagem = df_filtrado['Faixa Et√°ria'].value_counts().sort_index()
                    total = contagem.sum()
            
                    # GR√ÅFICO COM MESMO ESTILO VISUAL
                    fig, ax = plt.subplots(figsize=(7, 5))
                    bars = ax.bar(
                        contagem.index,
                        contagem.values,
                        color='#bd928b',
                        edgecolor='#bd928b',
                        width=0.8
                    )
            
                    # MESMO C√ÅLCULO DE PORCENTAGENS
                    for i, (categoria, valor) in enumerate(contagem.items()):
                        percentual = (valor / total) * 100
                        ax.text(
                            i,
                            valor + (total * 0.01),
                            f'{percentual:.1f}%',
                            ha='center',
                            va='bottom',
                            fontsize=10
                        )
                    # Configura√ß√µes do eixo X para alinhamento perfeito
                    ax.set_xticks(range(len(contagem)))  # Define um tick para cada barra
                    ax.set_xticklabels(contagem.index, rotation=45, ha='right', fontsize=10)  # ha='right' para melhor alinhamento
                    
                    # Configura√ß√µes do gr√°fico
                    ax.set_title('Distribui√ß√£o por Faixa Et√°ria', fontsize=14, pad=20)
                    ax.set_xlabel('Faixa Et√°ria', fontsize=12)
                    ax.set_ylabel('N√∫mero de Participantes', fontsize=12)
                    ax.grid(axis='y', linestyle='--', alpha=0.5)
                    ax.set_ylim(0, contagem.max() * 1.15)  # Espa√ßo para os r√≥tulos
            
                    # MESMA FORMATA√á√ÉO DE EIXOS
                    #ax.set_title('Distribui√ß√£o por Faixa Et√°ria', fontsize=12)
                    #ax.set_xlabel('Faixa Et√°ria', fontsize=10)
                    #ax.set_ylabel('N√∫mero de Participantes', fontsize=10)
                    #ax.tick_params(axis='x', rotation=45, labelsize=9)
                    #ax.grid(axis='y', linestyle='--', alpha=0.5)
                    #ax.set_ylim(0, contagem.max() * 1.15)
            
                    plt.tight_layout()
                    st.pyplot(fig, use_container_width=True)
                    plt.close(fig)
                    
                else:
                    st.warning("Dados de idade n√£o dispon√≠veis ou DataFrame vazio ap√≥s filtros.")
        
        # --- ABA 4: Caracter√≠sticas Educacionais (Novos Gr√°ficos Matplotlib em Colunas) ---
        with tab4:
            st.header("Caracter√≠sticas Educacionais")

            # Linha 1 de gr√°ficos Educacionais
            col1_edu_row1, col2_edu_row1 = st.columns(2)

            with col1_edu_row1:
                st.subheader("N√≠vel de Escolaridade do Participante")
                if 'N√≠vel de escolaridade do participante' in df_filtrado.columns and not df_filtrado.empty:
                    contagem = df_filtrado['N√≠vel de escolaridade do participante'].value_counts()
                    total = contagem.sum()

                    fig, ax = plt.subplots(figsize=(8, 5)) # Mantido o figsize do seu c√≥digo
                    bars = ax.barh(contagem.index.astype(str), contagem.values, color='#7bbda1', edgecolor='#7bbda1')

                    for i, (categoria, valor) in enumerate(contagem.items()):
                        percentual = (valor / total) * 100
                        ax.text(valor + 5, i, f'{percentual:.1f}%', va='center', fontsize=9)

                    ax.set_xlim(0, contagem.max() * 1.2)
                    ax.set_title('Distribui√ß√£o do n√≠vel de escolaridade do participante')
                    ax.set_xlabel('Frequ√™ncia')
                    ax.set_ylabel('Escolaridade')
                    ax.grid(axis='x', linestyle='--', alpha=0.5)
                    plt.tight_layout()
                    for spine in ax.spines.values():
                        spine.set_visible(True)
                        spine.set_linewidth(1.2)
                    st.pyplot(fig, use_container_width=True)
                    plt.close(fig)
                else:
                    st.warning("Coluna 'N√≠vel de escolaridade do participante' n√£o encontrada ou DataFrame vazio.")

            with col2_edu_row1:
                st.subheader("N√≠vel de Escolaridade do Respons√°vel")
                if 'N√≠vel de escolaridade do respons√°vel do participante' in df_filtrado.columns and not df_filtrado.empty:
                    contagem = df_filtrado['N√≠vel de escolaridade do respons√°vel do participante'].value_counts()
                    total = contagem.sum()

                    fig, ax = plt.subplots(figsize=(8, 5)) # Mantido o figsize do seu c√≥digo
                    bars = ax.barh(contagem.index.astype(str), contagem.values, color='#fcb653', edgecolor='#fcb653')

                    for i, (categoria, valor) in enumerate(contagem.items()):
                        percentual = (valor / total) * 100
                        ax.text(valor + 5, i, f'{percentual:.1f}%', va='center', fontsize=9)

                    ax.set_xlim(0, contagem.max() * 1.2)
                    ax.set_title('Distribui√ß√£o do n√≠vel de escolaridade do respons√°vel do participante')
                    ax.set_xlabel('Frequ√™ncia')
                    ax.set_ylabel('Escolaridade')
                    ax.grid(axis='x', linestyle='--', alpha=0.5)
                    plt.tight_layout()
                    for spine in ax.spines.values():
                        spine.set_visible(True)
                        spine.set_linewidth(1.2)
                    st.pyplot(fig, use_container_width=True)
                    plt.close(fig)
                else:
                    st.warning("Coluna 'N√≠vel de escolaridade do respons√°vel do participante' n√£o encontrada ou DataFrame vazio.")

            # Linha 2 de gr√°ficos Educacionais
            col1_edu_row2, col2_edu_row2 = st.columns(2)

            with col1_edu_row2:
                st.subheader("O Participante √© Alfabetizado?")
                if 'O participante √© alfabetizado' in df_filtrado.columns and not df_filtrado.empty:
                    contagem = df_filtrado['O participante √© alfabetizado'].value_counts()
                    total = contagem.sum()

                    fig, ax = plt.subplots(figsize=(6, 5)) # Mantido o figsize do seu c√≥digo
                    bars = ax.barh(contagem.index.astype(str), contagem.values, color='#cee879', edgecolor='#cee879')

                    for i, (categoria, valor) in enumerate(contagem.items()):
                        percentual = (valor / total) * 100
                        ax.text(valor + 5, i, f'{percentual:.1f}%', va='center', fontsize=9)

                    ax.set_xlim(0, contagem.max() * 1.2)
                    ax.set_title('Distribui√ß√£o do n√≠vel de alfabetiza√ß√£o do participante')
                    ax.set_xlabel('Frequ√™ncia')
                    ax.set_ylabel('Alfabetiza√ß√£o')
                    ax.grid(axis='x', linestyle='--', alpha=0.5)
                    plt.tight_layout()
                    for spine in ax.spines.values():
                        spine.set_visible(True)
                        spine.set_linewidth(1.2)
                    st.pyplot(fig, use_container_width=True)
                    plt.close(fig)
                else:
                    st.warning("Coluna 'O participante √© alfabetizado' n√£o encontrada ou DataFrame vazio.")

            with col2_edu_row2:
                st.subheader("O Participante Sabe Ler?")
                if 'Sabe ler' in df_filtrado.columns and not df_filtrado.empty:
                    df_filtrado['Sabe ler'] = (
                        df_filtrado['Sabe ler']
                        .astype(str)
                        .str.lower()
                        .str.strip()
                    )
                    contagem = df_filtrado['Sabe ler'].value_counts()
                    total = contagem.sum()

                    ordem_desejada = ['n√£o', 'sim']
                    contagem = contagem.reindex(ordem_desejada).dropna()
                    labels_formatados = [s.capitalize() for s in contagem.index]

                    fig, ax = plt.subplots(figsize=(6, 5)) # Mantido o figsize do seu c√≥digo
                    bars = ax.bar(labels_formatados, contagem.values, color='#daa979', edgecolor='#daa979')

                    for i, bar in enumerate(bars):
                        height = bar.get_height()
                        percentual = (height / total) * 100
                        ax.text(bar.get_x() + bar.get_width() / 2, height + 1, f'{percentual:.1f}%',
                                ha='center', va='bottom', fontsize=9)

                    ax.set_title('Distribui√ß√£o dos participantes que sabem ler')
                    ax.set_xlabel('Resposta')
                    ax.set_ylabel('Frequ√™ncia')
                    ax.set_xticklabels(labels_formatados, rotation=0, ha='center', fontsize=10)
                    ax.grid(axis='y', linestyle='--', alpha=0.5)
                    plt.tight_layout()
                    for spine in ax.spines.values():
                        spine.set_visible(True)
                        spine.set_linewidth(1.2)
                    st.pyplot(fig, use_container_width=True)
                    plt.close(fig)
                else:
                    st.warning("Coluna 'Sabe ler' n√£o encontrada ou DataFrame vazio.")

            # Linha 3 de gr√°ficos Educacionais
            col1_edu_row3, col2_edu_row3 = st.columns(2)

            with col1_edu_row3:
                st.subheader("O Participante Sabe Escrever?")
                if 'Sabe escrever' in df_filtrado.columns and not df_filtrado.empty:
                    df_filtrado['Sabe escrever'] = (
                        df_filtrado['Sabe escrever']
                        .astype(str)
                        .str.lower()
                        .str.strip()
                    )
                    contagem = df_filtrado['Sabe escrever'].value_counts()
                    total = contagem.sum()

                    ordem_desejada = ['n√£o', 'sim']
                    contagem = contagem.reindex(ordem_desejada).dropna()
                    labels_formatados = [s.capitalize() for s in contagem.index]

                    fig, ax = plt.subplots(figsize=(6, 5)) # Mantido o figsize do seu c√≥digo
                    bars = ax.bar(labels_formatados, contagem.values, color='#f9f36a', edgecolor='#f9f36a')

                    for i, bar in enumerate(bars):
                        height = bar.get_height()
                        percentual = (height / total) * 100
                        ax.text(bar.get_x() + bar.get_width() / 2, height + 1, f'{percentual:.1f}%',
                                ha='center', va='bottom', fontsize=9)

                    ax.set_title('Distribui√ß√£o dos participantes que sabem escrever')
                    ax.set_xlabel('Resposta')
                    ax.set_ylabel('Frequ√™ncia')
                    ax.set_xticklabels(labels_formatados, rotation=0, ha='center', fontsize=10)
                    ax.grid(axis='y', linestyle='--', alpha=0.5)
                    plt.tight_layout()
                    for spine in ax.spines.values():
                        spine.set_visible(True)
                        spine.set_linewidth(1.2)
                    st.pyplot(fig, use_container_width=True)
                    plt.close(fig)
                else:
                    st.warning("Coluna 'Sabe escrever' n√£o encontrada ou DataFrame vazio.")

            with col2_edu_row3:
                st.subheader("O Participante Consegue Interpretar Texto?")
                if 'O participante consegue interpretar texto?' in df_filtrado.columns and not df_filtrado.empty:
                    df_filtrado['O participante consegue interpretar texto?'] = (
                        df_filtrado['O participante consegue interpretar texto?']
                        .astype(str)
                        .str.lower()
                        .str.strip()
                    )
                    contagem = df_filtrado['O participante consegue interpretar texto?'].value_counts()
                    total = contagem.sum()

                    ordem_desejada = ['n√£o', 'sim']
                    contagem = contagem.reindex(ordem_desejada).dropna()
                    labels_formatados = [s.capitalize() for s in contagem.index]

                    fig, ax = plt.subplots(figsize=(6, 5)) # Mantido o figsize do seu c√≥digo
                    bars = ax.bar(labels_formatados, contagem.values, color='#88b4ec', edgecolor='#88b4ec')

                    for i, bar in enumerate(bars):
                        height = bar.get_height()
                        percentual = (height / total) * 100
                        ax.text(bar.get_x() + bar.get_width() / 2, height + 1, f'{percentual:.1f}%',
                                ha='center', va='bottom', fontsize=9)

                    ax.set_title('Distribui√ß√£o dos participantes que conseguem interpretar texto')
                    ax.set_xlabel('Resposta')
                    ax.set_ylabel('Frequ√™ncia')
                    ax.set_xticklabels(labels_formatados, rotation=0, ha='center', fontsize=10)
                    ax.grid(axis='y', linestyle='--', alpha=0.5)
                    plt.tight_layout()
                    for spine in ax.spines.values():
                        spine.set_visible(True)
                        spine.set_linewidth(1.2)
                    st.pyplot(fig, use_container_width=True)
                    plt.close(fig)
                else:
                    st.warning("Coluna 'O participante consegue interpretar texto?' n√£o encontrada ou DataFrame vazio.")


        # --- ABA 5: Caracter√≠sticas de Sa√∫de e Estilo de Vida (Gr√°ficos Matplotlib em Colunas) ---
        with tab5:
            st.header("Caracter√≠sticas de Sa√∫de e Estilo de Vida")
        
            # Tabela de cruzamento entre Sexo e Classifica√ß√£o IMC
            st.subheader("Distribui√ß√£o do IMC por Sexo (%)")
            
            # Processamento dos dados para a tabela
            if 'Sexo do participante' in df_filtrado.columns and 'Classifica√ß√£o IMC' in df_filtrado.columns and not df_filtrado.empty:
                # Garantir que a coluna 'IMC' √© num√©rica
                df_filtrado['IMC'] = pd.to_numeric(df_filtrado['IMC'], errors='coerce')
                
                # Definir condi√ß√µes e classifica√ß√µes
                condicoes = [
                    (df_filtrado['IMC'] < 18.5),
                    (df_filtrado['IMC'] >= 18.5) & (df_filtrado['IMC'] <= 24.9),
                    (df_filtrado['IMC'] >= 25) & (df_filtrado['IMC'] <= 29.9),
                    (df_filtrado['IMC'] >= 30) & (df_filtrado['IMC'] <= 34.9),
                    (df_filtrado['IMC'] >= 35) & (df_filtrado['IMC'] <= 39.9),
                    (df_filtrado['IMC'] >= 40)
                ]
                escolhas = [
                    'Abaixo do peso',
                    'Normal',
                    'Sobrepeso',
                    'Obesidade Grau I',
                    'Obesidade Grau II',
                    'Obesidade Grau III'
                ]
                
                # Calcular classifica√ß√£o
                classificacao_calculada = np.select(condicoes, escolhas, default=pd.NA)
                df_filtrado['Classifica√ß√£o IMC'] = df_filtrado['Classifica√ß√£o IMC'].fillna(
                    pd.Series(classificacao_calculada, index=df_filtrado.index))
                df_filtrado['Classifica√ß√£o IMC'] = df_filtrado['Classifica√ß√£o IMC'].str.strip()
                
                # Criar tabela de cruzamento
                tabela_cruzada = pd.crosstab(
                    df_filtrado['Sexo do participante'], 
                    df_filtrado['Classifica√ß√£o IMC'], 
                    normalize='index') * 100
                
                # Exibir tabela formatada
                st.dataframe(tabela_cruzada.style.format("{:.1f}%"), use_container_width=True)
            else:
                st.warning("Colunas necess√°rias para a tabela n√£o encontradas ou DataFrame vazio.")

            # Linha 2 de gr√°ficos de Sa√∫de
            col1_saude_row2, col2_saude_row2 = st.columns(2)

            with col1_saude_row2:
                # Linha 1 de gr√°ficos de Sa√∫de (agora apenas com o gr√°fico de idade gestacional)
                st.subheader("Idade em que a m√£e do participante teve a gesta√ß√£o")
                nome_coluna_idade_mae_original = 'Idade em que a m√£e do participante teve a gesta√ß√£o'
                if nome_coluna_idade_mae_original in df_filtrado.columns and not df_filtrado.empty:
                    df_filtrado['Idade em que a m√£e do participante teve a gesta√ß√£o_Numerica'] = pd.to_numeric(
                        df_filtrado[nome_coluna_idade_mae_original], errors='coerce'
                    )
                    bins = [15, 24, 30, 35, 40, 45, 48]
                    labels = ['16 - 24', '25 - 30', '31 - 35', '36 - 40', '41 - 45', '46 - 48']
                    df_filtrado['Faixa Et√°ria da M√£e'] = pd.cut(
                        df_filtrado['Idade em que a m√£e do participante teve a gesta√ß√£o_Numerica'],
                        bins=bins, labels=labels, right=True, include_lowest=True
                    )
                    contagem_idade_mae = df_filtrado['Faixa Et√°ria da M√£e'].value_counts(dropna=False).sort_index()
                    contagem_idade_mae = contagem_idade_mae.reindex(labels, fill_value=0)
                    total_idade_mae = contagem_idade_mae.sum()
            
                    if not contagem_idade_mae.empty and total_idade_mae > 0:
                        fig, ax = plt.subplots(figsize=(9, 7))
                        bars = ax.barh(contagem_idade_mae.index.astype(str), contagem_idade_mae.values, color='#92a9a7', edgecolor='#92a9a7')
                        for i, (categoria, valor) in enumerate(contagem_idade_mae.items()):
                            percentual = (valor / total_idade_mae) * 100
                            ax.text(valor + 5, i, f'{percentual:.1f}%', va='center', fontsize=9)
            
                        max_val_for_xlim = contagem_idade_mae.max()
                        if pd.notna(max_val_for_xlim) and max_val_for_xlim > 0:
                            ax.set_xlim(0, max_val_for_xlim * 1.2)
                        else:
                            ax.set_xlim(0, 10)
            
                        ax.set_title('Distribui√ß√£o da Idade Gestacional da M√£e por Faixa Et√°ria', fontsize=14)
                        ax.set_xlabel('Contagem de M√£es', fontsize=12)
                        ax.set_ylabel('Faixa Et√°ria da M√£e', fontsize=12)
                        ax.grid(axis='x', linestyle='--', alpha=0.5)
                        plt.tight_layout()
                        for spine in ax.spines.values():
                            spine.set_visible(True)
                            spine.set_linewidth(1.2)
                        st.pyplot(fig, use_container_width=True)
                        plt.close(fig)
                    else:
                        st.warning(f"N√£o h√° dados v√°lidos para o gr√°fico de '{nome_coluna_idade_mae_original}'.")
                else:
                    st.warning(f"Coluna '{nome_coluna_idade_mae_original}' n√£o encontrada ou DataFrame vazio.")

            with col2_saude_row2:
                st.subheader("Rede de Acompanhamento Pr√©-natal da M√£e")
                if 'Realizou o acompanhamento pr√© natal na rede:' in df_filtrado.columns and not df_filtrado.empty:
                    contagem = df_filtrado['Realizou o acompanhamento pr√© natal na rede:'].value_counts()
                    total = contagem.sum()

                    fig, ax = plt.subplots(figsize=(6, 5))
                    bars = ax.barh(contagem.index.astype(str), contagem.values, color='#5fddaa', edgecolor='#5fddaa')

                    for i, (categoria, valor) in enumerate(contagem.items()):
                        percentual = (valor / total) * 100
                        ax.text(valor + 5, i, f'{percentual:.1f}%', va='center', fontsize=9)

                    ax.set_xlim(0, contagem.max() * 1.2)
                    ax.set_title('Distribui√ß√£o da rede onde a m√£e realizou pr√© natal')
                    ax.set_xlabel('Frequ√™ncia')
                    ax.set_ylabel('Rede')
                    ax.grid(axis='x', linestyle='--', alpha=0.5)
                    plt.tight_layout()
                    for spine in ax.spines.values():
                        spine.set_visible(True)
                        spine.set_linewidth(1.2)
                    st.pyplot(fig, use_container_width=True)
                    plt.close(fig)
                else:
                    st.warning("Coluna 'Realizou o acompanhamento pr√© natal na rede:' n√£o encontrada ou DataFrame vazio.")
            
            # Linha 3 de gr√°ficos de Sa√∫de
            col1_saude_row3, col2_saude_row3 = st.columns(2)
            
            with col1_saude_row3:
                st.subheader("Quando o Diagn√≥stico do Participante foi Realizado")
                if 'O diagn√≥stico do participante foi realizado no' in df_filtrado.columns and not df_filtrado.empty:
                    contagem = df_filtrado['O diagn√≥stico do participante foi realizado no'].value_counts()
                    total = contagem.sum()

                    fig, ax = plt.subplots(figsize=(6, 5))
                    bars = ax.barh(contagem.index.astype(str), contagem.values, color='#7696dc', edgecolor='#7696dc')

                    for i, (categoria, valor) in enumerate(contagem.items()):
                        percentual = (valor / total) * 100
                        ax.text(valor + 5, i, f'{percentual:.1f}%', va='center', fontsize=9)

                    ax.set_xlim(0, contagem.max() * 1.2)
                    ax.set_title('Distribui√ß√£o de quando o diagn√≥stico do participante foi realizado')
                    ax.set_xlabel('Frequ√™ncia')
                    ax.set_ylabel('Diagn√≥stico')
                    ax.grid(axis='x', linestyle='--', alpha=0.5)
                    plt.tight_layout()
                    for spine in ax.spines.values():
                        spine.set_visible(True)
                        spine.set_linewidth(1.2)
                    st.pyplot(fig, use_container_width=True)
                    plt.close(fig)
                else:
                    st.warning("Coluna 'O diagn√≥stico do participante foi realizado no' n√£o encontrada ou DataFrame vazio.")

            with col2_saude_row3:
                st.subheader("Foi feito o cari√≥tipo?")
                if 'Foi feito o cari√≥tipo' in df_filtrado.columns and not df_filtrado.empty:
                    df_filtrado['Foi feito o cari√≥tipo'] = (
                        df_filtrado['Foi feito o cari√≥tipo']
                        .astype(str)
                        .str.lower()
                        .str.strip()
                    )
                    contagem = df_filtrado['Foi feito o cari√≥tipo'].value_counts()
                    total = contagem.sum()

                    ordem_desejada = ['n√£o', 'sim']
                    contagem = contagem.reindex(ordem_desejada).dropna()
                    labels_formatados = [s.capitalize() for s in contagem.index]

                    fig, ax = plt.subplots(figsize=(6, 5))
                    bars = ax.bar(labels_formatados, contagem.values, color='#c5eea6', edgecolor='#c5eea6')

                    for i, bar in enumerate(bars):
                        height = bar.get_height()
                        percentual = (height / total) * 100
                        ax.text(bar.get_x() + bar.get_width() / 2, height + 1, f'{percentual:.1f}%',
                                ha='center', va='bottom', fontsize=9)

                    ax.set_title('Distribui√ß√£o dos participantes que fizeram o cari√≥tipo')
                    ax.set_xlabel('Resposta')
                    ax.set_ylabel('Frequ√™ncia')
                    ax.set_xticklabels(labels_formatados, rotation=0, ha='center', fontsize=10)
                    ax.grid(axis='y', linestyle='--', alpha=0.5)
                    plt.tight_layout()
                    for spine in ax.spines.values():
                        spine.set_visible(True)
                        spine.set_linewidth(1.2)
                    st.pyplot(fig, use_container_width=True)
                    plt.close(fig)
                else:
                    st.warning("Coluna 'Foi feito o cari√≥tipo' n√£o encontrada ou DataFrame vazio.")

            # Linha 4 de gr√°ficos de Sa√∫de
            col1_saude_row4, col2_saude_row4 = st.columns(2)
            
            with col1_saude_row4:
                st.subheader("Irm√£os do participante possuem alguma defici√™ncia?")
                if 'Os irm√£os do participante possui alguma defici√™ncia' in df_filtrado.columns and not df_filtrado.empty:
                    df_filtrado['Os irm√£os do participante possui alguma defici√™ncia'] = (
                        df_filtrado['Os irm√£os do participante possui alguma defici√™ncia']
                        .astype(str)
                        .str.lower()
                        .str.strip()
                    )
                    contagem = df_filtrado['Os irm√£os do participante possui alguma defici√™ncia'].value_counts()
                    total = contagem.sum()

                    ordem_desejada = ['n√£o', 'sim']
                    contagem = contagem.reindex(ordem_desejada).dropna()
                    labels_formatados = [s.capitalize() for s in contagem.index]

                    fig, ax = plt.subplots(figsize=(6, 5))
                    bars = ax.bar(labels_formatados, contagem.values, color='#ea664d', edgecolor='#ea664d')

                    for i, bar in enumerate(bars):
                        height = bar.get_height()
                        percentual = (height / total) * 100
                        ax.text(bar.get_x() + bar.get_width() / 2, height + 1, f'{percentual:.1f}%',
                                ha='center', va='bottom', fontsize=9)

                    ax.set_title('Distribui√ß√£o de irm√£os com alguma defici√™ncia')
                    ax.set_xlabel('Resposta')
                    ax.set_ylabel('Frequ√™ncia')
                    ax.set_xticklabels(labels_formatados, rotation=0, ha='center', fontsize=10)
                    ax.grid(axis='y', linestyle='--', alpha=0.5)
                    plt.tight_layout()
                    for spine in ax.spines.values():
                        spine.set_visible(True)
                        spine.set_linewidth(1.2)
                    st.pyplot(fig, use_container_width=True)
                    plt.close(fig)
                else:
                    st.warning("Coluna 'Os irm√£os do participante possui alguma defici√™ncia' n√£o encontrada ou DataFrame vazio.")

            with col2_saude_row4:
                st.subheader("Sa√∫de Geral do Participante (Percep√ß√£o do Cuidador)")
                nome_coluna_saude_geral = 'Voc√™ considera que a sa√∫de do participante em geral √©'
                if nome_coluna_saude_geral in df_filtrado.columns and not df_filtrado.empty:
                    df_filtrado[nome_coluna_saude_geral] = df_filtrado[nome_coluna_saude_geral].astype(str).str.lower().str.strip()
                    contagem_saude = df_filtrado[nome_coluna_saude_geral].value_counts(dropna=False)
                    ordem_saude_desejada = ['muito boa', 'boa', 'excelente', 'regular', 'ruim', 'muito ruim', 'nan']
                    contagem_saude = contagem_saude.reindex(ordem_saude_desejada, fill_value=0).dropna()
                    contagem_saude = contagem_saude[contagem_saude > 0]
                    total_saude = contagem_saude.sum()

                    if not contagem_saude.empty and total_saude > 0:
                        fig, ax = plt.subplots(figsize=(9, 7))
                        bars = ax.barh(contagem_saude.index.astype(str), contagem_saude.values, color='#ff9486', edgecolor='#ff9486')
                        for i, (categoria, valor) in enumerate(contagem_saude.items()):
                            if total_saude > 0:
                                percentual = (valor / total_saude) * 100
                                ax.text(valor + 5, i, f'{percentual:.1f}%', va='center', fontsize=9)
                            else:
                                ax.text(valor + 5, i, '0.0%', va='center', fontsize=9)

                        max_val_for_xlim = contagem_saude.max()
                        if pd.notna(max_val_for_xlim) and max_val_for_xlim > 0:
                            ax.set_xlim(0, max_val_for_xlim * 1.2)
                        else:
                            ax.set_xlim(0, 10)

                        ax.set_title('Distribui√ß√£o de como o cuidador considera a sa√∫de do participante em geral', fontsize=14)
                        ax.set_xlabel('Frequ√™ncia', fontsize=12)
                        ax.set_ylabel('Sa√∫de em geral', fontsize=12)
                        ax.grid(axis='x', linestyle='--', alpha=0.5)
                        plt.tight_layout()
                        for spine in ax.spines.values():
                            spine.set_visible(True)
                            spine.set_linewidth(1.2)
                        st.pyplot(fig, use_container_width=True)
                        plt.close(fig)
                    else:
                        st.warning(f"N√£o h√° dados v√°lidos para o gr√°fico de '{nome_coluna_saude_geral}'.")
                else:
                    st.warning(f"Coluna '{nome_coluna_saude_geral}' n√£o encontrada ou DataFrame vazio.")

 
            # Linha 5 de gr√°ficos de Sa√∫de
            col1_saude_row5, col2_saude_row5 = st.columns(2)           

            with col1_saude_row5:
                st.subheader("Rede de Acompanhamento Psicol√≥gico")
                if 'Realiza/realizou acompanhamento psicol√≥gico na rede' in df_filtrado.columns and not df_filtrado.empty:
                    contagem = df_filtrado['Realiza/realizou acompanhamento psicol√≥gico na rede'].value_counts()
                    total = contagem.sum()

                    fig, ax = plt.subplots(figsize=(6, 5))
                    bars = ax.barh(contagem.index.astype(str), contagem.values, color='#f5da7a', edgecolor='#f5da7a')

                    for i, (categoria, valor) in enumerate(contagem.items()):
                        percentual = (valor / total) * 100
                        ax.text(valor + 5, i, f'{percentual:.1f}%', va='center', fontsize=9)

                    ax.set_xlim(0, contagem.max() * 1.2)
                    ax.set_title('Distribui√ß√£o onde o participante realiza/realizou acompanhamento psicol√≥gico')
                    ax.set_xlabel('Frequ√™ncia')
                    ax.set_ylabel('Rede')
                    ax.grid(axis='x', linestyle='--', alpha=0.5)
                    plt.tight_layout()
                    for spine in ax.spines.values():
                        spine.set_visible(True)
                        spine.set_linewidth(1.2)
                    st.pyplot(fig, use_container_width=True)
                    plt.close(fig)
                else:
                    st.warning("Coluna 'Realiza/realizou acompanhamento psicol√≥gico na rede' n√£o encontrada ou DataFrame vazio.")

            with col2_saude_row5:
                st.subheader("Rede de Estimula√ß√£o Precoce")
            
                if 'Realizou o programa de interven√ß√£o/estimula√ß√£o precoce na rede' in df_filtrado.columns and not df_filtrado.empty:
                    rede_estimulacao = df_filtrado['Realizou o programa de interven√ß√£o/estimula√ß√£o precoce na rede'].copy()
                    rede_estimulacao.replace('Particular', 'Privada', inplace=True)

                    contagem = rede_estimulacao.value_counts()
                    total = contagem.sum()
                    porcentagem = (contagem / total) * 100
            
                    fig, ax = plt.subplots(figsize=(6, 5))
            
                    cor_unica = sns.color_palette("viridis", 1)[0]
                    bars = ax.barh(contagem.index.astype(str), contagem.values, color=cor_unica, edgecolor=cor_unica)
            
                    for i, (categoria, valor) in enumerate(contagem.items()):
                        percentual = porcentagem.loc[categoria]
                        ax.text(valor + (contagem.max() * 0.05),
                                i,
                                f'{percentual:.1f}%',
                                va='center',
                                fontsize=9,
                                color='black')
            
                    ax.set_xlim(0, contagem.max() * 1.2)
                    ax.set_xlabel('Frequ√™ncia')
                    ax.set_ylabel('Rede')
                    ax.invert_yaxis()
                    ax.set_title('Distribui√ß√£o onde o participante realizou estimula√ß√£o precoce')
                    ax.grid(axis='x', linestyle='--', alpha=0.5)
            
                    plt.tight_layout()
                    for spine in ax.spines.values():
                        spine.set_visible(True)
                        spine.set_linewidth(1.2)
            
                    st.pyplot(fig, use_container_width=True)
                    plt.close(fig)

                else:
                    st.warning("Coluna 'Realizou o programa de interven√ß√£o/estimula√ß√£o precoce na rede' n√£o encontrada ou DataFrame vazio.")

            # Linha 6 de gr√°ficos de Sa√∫de
            col1_saude_row6, col2_saude_row6 = st.columns(2)
            
            with col1_saude_row6:
                st.subheader("Rede de Acompanhamento com Cl√≠nico Geral")
                # Aten√ß√£o: 'Se sim, o acompanhamento ocorre na rede1:' √© o nome real da coluna
                if 'Se sim, o acompanhamento ocorre na rede1:' in df_filtrado.columns and not df_filtrado.empty:
                    contagem = df_filtrado['Se sim, o acompanhamento ocorre na rede1:'].value_counts()
                    total = contagem.sum()

                    fig, ax = plt.subplots(figsize=(6, 5))
                    bars = ax.barh(contagem.index.astype(str), contagem.values, color='#a35572', edgecolor='#a35572')

                    for i, (categoria, valor) in enumerate(contagem.items()):
                        percentual = (valor / total) * 100
                        ax.text(valor + 5, i, f'{percentual:.1f}%', va='center', fontsize=9)

                    ax.set_xlim(0, contagem.max() * 1.2)
                    ax.set_title('Distribui√ß√£o onde o participante faz acompanhamento com cl√≠nico geral')
                    ax.set_xlabel('Frequ√™ncia')
                    ax.set_ylabel('Rede')
                    ax.grid(axis='x', linestyle='--', alpha=0.5)
                    plt.tight_layout()
                    for spine in ax.spines.values():
                        spine.set_visible(True)
                        spine.set_linewidth(1.2)
                    st.pyplot(fig, use_container_width=True)
                    plt.close(fig)
                else:
                    st.warning("Coluna 'Se sim, o acompanhamento ocorre na rede1:' n√£o encontrada ou DataFrame vazio.")

            with col2_saude_row6:
                st.subheader("Rede de Acompanhamento com Dentista")
                # Aten√ß√£o: 'Se sim, o acompanhamento ocorre na rede2:' √© o nome real da coluna
                if 'Se sim, o acompanhamento ocorre na rede2:' in df_filtrado.columns and not df_filtrado.empty:
                    contagem = df_filtrado['Se sim, o acompanhamento ocorre na rede2:'].value_counts()
                    total = contagem.sum()

                    fig, ax = plt.subplots(figsize=(6, 5))
                    bars = ax.barh(contagem.index.astype(str), contagem.values, color='#8ccc81', edgecolor='#8ccc81')

                    for i, (categoria, valor) in enumerate(contagem.items()):
                        percentual = (valor / total) * 100
                        ax.text(valor + 5, i, f'{percentual:.1f}%', va='center', fontsize=9)

                    ax.set_xlim(0, contagem.max() * 1.2)
                    ax.set_title('Distribui√ß√£o onde o participante faz acompanhamento com dentista')
                    ax.set_xlabel('Frequ√™ncia')
                    ax.set_ylabel('Rede')
                    ax.grid(axis='x', linestyle='--', alpha=0.5)
                    plt.tight_layout()
                    for spine in ax.spines.values():
                        spine.set_visible(True)
                        spine.set_linewidth(1.2)
                    st.pyplot(fig, use_container_width=True)
                    plt.close(fig)
                else:
                    st.warning("Coluna 'Se sim, o acompanhamento ocorre na rede2:' n√£o encontrada ou DataFrame vazio.")

            # Linha 7 de gr√°ficos de Sa√∫de
            col1_saude_row7, col2_saude_row7 = st.columns(2)            

            with col1_saude_row7:
                st.subheader("Rede de Acompanhamento com Nutricionista")
                # Aten√ß√£o: 'Se sim, o acompanhamento ocorre na rede3:' √© o nome real da coluna
                if 'Se sim, o acompanhamento ocorre na rede3:' in df_filtrado.columns and not df_filtrado.empty:
                    contagem = df_filtrado['Se sim, o acompanhamento ocorre na rede3:'].value_counts()
                    total = contagem.sum()

                    fig, ax = plt.subplots(figsize=(6, 5))
                    bars = ax.barh(contagem.index.astype(str), contagem.values, color='#d698b1', edgecolor='#d698b1')

                    for i, (categoria, valor) in enumerate(contagem.items()):
                        percentual = (valor / total) * 100
                        ax.text(valor + 5, i, f'{percentual:.1f}%', va='center', fontsize=9)

                    ax.set_xlim(0, contagem.max() * 1.2)
                    ax.set_title('Distribui√ß√£o onde o participante faz acompanhamento com nutricionista')
                    ax.set_xlabel('Frequ√™ncia')
                    ax.set_ylabel('Rede')
                    ax.grid(axis='x', linestyle='--', alpha=0.5)
                    plt.tight_layout()
                    for spine in ax.spines.values():
                        spine.set_visible(True)
                        spine.set_linewidth(1.2)
                    st.pyplot(fig, use_container_width=True)
                    plt.close(fig)
                else:
                    st.warning("Coluna 'Se sim, o acompanhamento ocorre na rede3:' n√£o encontrada ou DataFrame vazio.")


            with col2_saude_row7:
                st.subheader("Rede de Acompanhamento com Oftalmologista")
                # Aten√ß√£o: 'Se sim, o acompanhamento ocorre na rede4:' √© o nome real da coluna
                if 'Se sim, o acompanhamento ocorre na rede4:' in df_filtrado.columns and not df_filtrado.empty:
                    contagem = df_filtrado['Se sim, o acompanhamento ocorre na rede4:'].value_counts()
                    total = contagem.sum()

                    fig, ax = plt.subplots(figsize=(6, 5))
                    bars = ax.barh(contagem.index.astype(str), contagem.values, color='#5b7c8d', edgecolor='#5b7c8d')

                    for i, (categoria, valor) in enumerate(contagem.items()):
                        percentual = (valor / total) * 100
                        ax.text(valor + 5, i, f'{percentual:.1f}%', va='center', fontsize=9)

                    ax.set_xlim(0, contagem.max() * 1.2)
                    ax.set_title('Distribui√ß√£o onde o participante faz acompanhamento com oftalmologista')
                    ax.set_xlabel('Frequ√™ncia')
                    ax.set_ylabel('Rede')
                    ax.grid(axis='x', linestyle='--', alpha=0.5)
                    plt.tight_layout()
                    for spine in ax.spines.values():
                        spine.set_visible(True)
                        spine.set_linewidth(1.2)
                    st.pyplot(fig, use_container_width=True)
                    plt.close(fig)
                else:
                    st.warning("Coluna 'Se sim, o acompanhamento ocorre na rede4:' n√£o encontrada ou DataFrame vazio.")

            # Linha 8 de gr√°ficos de Sa√∫de
            col1_saude_row8, col2_saude_row8 = st.columns(2) 
            
            with col1_saude_row8:

                # --- Gr√°fico de Diagn√≥sticos Psicol√≥gicos (sem "Sem Diagn√≥stico") ---
                st.subheader("Distribui√ß√£o de Diagn√≥sticos Psicol√≥gicos")
                
                # 1. Definir colunas de diagn√≥stico (removendo 'N√£o possui')
                diagnosticos_cols = [
                    'O participante possui diagn√≥stico m√©dico de (Ansiedade)',
                    'O participante possui diagn√≥stico m√©dico de (Depress√£o)',
                    'O participante possui diagn√≥stico m√©dico de (Outros dist√∫rbios de humor)'
                ]
                
                # Filtrar colunas existentes
                cols_existentes = [col for col in diagnosticos_cols if col in df_filtrado.columns]
                
                if cols_existentes and not df_filtrado.empty:
                    # 2. Processar os dados
                    df_diag = df_filtrado[cols_existentes].copy()
                    
                    # Converter para valores booleanos
                    for col in cols_existentes:
                        df_diag[col] = df_diag[col].astype(str).str.strip().str.lower()
                        df_diag[col] = df_diag[col].map({'sim': True, 'n√£o': False, 'true': True, 'false': False}).fillna(False)
                    
                    # Contar os diagn√≥sticos
                    contagem = df_diag.sum()
                    total = len(df_diag)
                    porcentagem = (contagem / total) * 100
                    
                    # Renomear para nomes mais amig√°veis
                    nomes_amigaveis = {
                        'O participante possui diagn√≥stico m√©dico de (Ansiedade)': 'Ansiedade',
                        'O participante possui diagn√≥stico m√©dico de (Depress√£o)': 'Depress√£o',
                        'O participante possui diagn√≥stico m√©dico de (Outros dist√∫rbios de humor)': 'Outros Dist√∫rbios'
                    }
                    contagem.index = contagem.index.map(nomes_amigaveis)
                    porcentagem.index = porcentagem.index.map(nomes_amigaveis)
                    
                    # 3. Criar o gr√°fico
                    fig, ax = plt.subplots(figsize=(10, 6))
                    
                    # Usar palette do Seaborn para cores consistentes
                    cores = sns.color_palette("viridis", 1)
                    barras = ax.bar(contagem.index, contagem.values, color=cores)
                    
                    # Adicionar valores e porcentagens
                    for barra, valor, pct in zip(barras, contagem.values, porcentagem.values):
                        altura = barra.get_height()
                        ax.text(barra.get_x() + barra.get_width()/2, altura + 0.5,
                               f'{valor} ({pct:.1f}%)', ha='center', va='bottom', fontsize=10)
                    
                    # Configura√ß√µes do gr√°fico
                    ax.set_title('Preval√™ncia de Diagn√≥sticos Psicol√≥gicos', fontsize=14, pad=20)
                    ax.set_xlabel('Tipo de Diagn√≥stico', fontsize=12)
                    ax.set_ylabel('Frqu√™ncia', fontsize=12)
                    ax.grid(axis='y', linestyle='--', alpha=0.7)
                    ax.set_ylim(0, contagem.max() * 1.2)
                    plt.xticks(rotation=45, ha='right')
                    
                    plt.tight_layout()
                    st.pyplot(fig, use_container_width=True)
                    plt.close(fig)
                        
                else:
                    st.warning("Nenhum dado de diagn√≥stico psicol√≥gico dispon√≠vel ap√≥s os filtros aplicados.")

            # --- Se√ß√£o: Distribui√ß√£o de Imuniza√ß√µes (Vacinas) ---
            with col2_saude_row8:
                st.subheader("Distribui√ß√£o de Imuniza√ß√µes (Vacinas)")
                colunas_imunizacao = [
                    'Recebeu alguma das imuniza√ß√µes a seguir (Palivizumabe)',
                    'Recebeu alguma das imuniza√ß√µes a seguir (BCG)',
                    'Recebeu alguma das imuniza√ß√µes a seguir (Hepatite B)',
                    'Recebeu alguma das imuniza√ß√µes a seguir (Rotavirus)',
                    'Recebeu alguma das imuniza√ß√µes a seguir (Tr√≠plice bacteriana)',
                    'Recebeu alguma das imuniza√ß√µes a seguir (Haemophilus influenzae b)',
                    'Recebeu alguma das imuniza√ß√µes a seguir (Poliomielite v√≠rus inativado)',
                    'Recebeu alguma das imuniza√ß√µes a seguir (Poliomielite oral)',
                    'Recebeu alguma das imuniza√ß√µes a seguir (Pneumoc√≥cicas conjugadas)',
                    'Recebeu alguma das imuniza√ß√µes a seguir (Meningoc√≥cicas conjugadas)',
                    'Recebeu alguma das imuniza√ß√µes a seguir (Meningoc√≥cica B)',
                    'Recebeu alguma das imuniza√ß√µes a seguir (Influenza)',
                    'Recebeu alguma das imuniza√ß√µes a seguir (Febre amarela)',
                    'Recebeu alguma das imuniza√ß√µes a seguir (Tr√≠plice viral)',
                    'Recebeu alguma das imuniza√ß√µes a seguir (Varicela)',
                    'Recebeu alguma das imuniza√ß√µes a seguir (Hepatite A)',
                    'Recebeu alguma das imuniza√ß√µes a seguir (HPV)',
                    'Recebeu alguma das imuniza√ß√µes a seguir (Difteria e t√©tano adulto)',
                    'Recebeu alguma das imuniza√ß√µes a seguir (Herpes zoster)',
                    'Recebeu alguma das imuniza√ß√µes a seguir (Dengue)',
                    'Recebeu alguma das imuniza√ß√µes a seguir (Recebeu todas)'
                ]
            
                colunas_existentes_imunizacao = [col for col in colunas_imunizacao if col in df_filtrado.columns]
            
                if not colunas_existentes_imunizacao:
                    st.warning("Nenhuma coluna de imuniza√ß√£o (vacinas) foi encontrada no DataFrame. Verifique os nomes.")
                else:
                    contagens_vacinas = {}
                    total_participantes_para_porcentagem = len(df_filtrado)
            
                    if total_participantes_para_porcentagem == 0:
                        st.info("Nenhum participante encontrado com os filtros selecionados para exibir imuniza√ß√µes.")
                    else:
                        df_temp_imunizacao = df_filtrado.copy()
            
                        for col_imunizacao_single in colunas_existentes_imunizacao:
                            df_temp_imunizacao[col_imunizacao_single] = df_temp_imunizacao[col_imunizacao_single].astype(str).str.strip().str.lower()
                            df_temp_imunizacao[col_imunizacao_single] = df_temp_imunizacao[col_imunizacao_single].apply(lambda x: 'Sim' if x == 'sim' else 'N√£o')
                        
                            count_sim = df_temp_imunizacao[df_temp_imunizacao[col_imunizacao_single] == 'Sim'].shape[0]
                        
                            if '(' in col_imunizacao_single and ')' in col_imunizacao_single:
                                nome_vacina_limpo = col_imunizacao_single.split('(')[-1].replace(')', '')
                            else:
                                nome_vacina_limpo = col_imunizacao_single
            
                            if count_sim > 0:
                                contagens_vacinas[nome_vacina_limpo] = count_sim
            
                        if not contagens_vacinas:
                            st.info("Nenhuma vacina possui contagens positivas para plotar com os filtros selecionados.")
                        else:
                            contagem_series = pd.Series(contagens_vacinas).sort_values(ascending=True)
            
                            fig, ax = plt.subplots(figsize=(8, max(6, len(contagem_series) * 0.4)))
            
                            cor_unica = '#f5da7a'
                            bars = ax.barh(contagem_series.index, contagem_series.values, color=cor_unica, edgecolor=cor_unica)
            
                            for i, (vacina, valor) in enumerate(contagem_series.items()):
                                percentual = (valor / total_participantes_para_porcentagem) * 100
                                ax.text(valor + (contagem_series.max() * 0.02),
                                        i,
                                        f'{percentual:.1f}%',
                                        va='center',
                                        fontsize=9,
                                        color='black')
            
                            ax.set_xlim(0, contagem_series.max() * 1.25)
                            ax.set_title('Distribui√ß√£o de imuniza√ß√µes/vacinas entre os participantes', fontsize=16)
                            ax.set_xlabel('Frequ√™ncia')
                            ax.set_ylabel('Imunizante/vacina')
                            ax.grid(axis='x', linestyle='--', alpha=0.5)
                            plt.tight_layout()
            
                            for spine in ax.spines.values():
                                spine.set_visible(True)
                                spine.set_linewidth(1.2)
            
                            st.pyplot(fig, use_container_width=True)
                            plt.close(fig)

            # ------------------------------------------------------------------------
                   
            # --- Preval√™ncia de Morbidades e/ou Doen√ßas ---
            st.subheader("Preval√™ncia de Morbidades e/ou Doen√ßas")
            col_morbidades = [col for col in df_filtrado.columns if 'Apresenta algumas das morbidades' in col]
            
            if col_morbidades and not df_filtrado.empty:
                df_morbidades_temp = df_filtrado[col_morbidades].copy()
                for col in col_morbidades:
                    df_morbidades_temp[col] = df_morbidades_temp[col].astype(str).str.strip().str.lower()
                    df_morbidades_temp[col] = df_morbidades_temp[col].map({'sim': 'Sim', 'n√£o': 'N√£o', 'nan': 'N√£o'}).fillna('N√£o')
            
                df_morbidades_long = df_morbidades_temp.melt(var_name='Morbidade', value_name='Status')
                df_morbidades_sim = df_morbidades_long[df_morbidades_long['Status'] == 'Sim']
                contagem_morbidades = df_morbidades_sim['Morbidade'].value_counts().reset_index()
                contagem_morbidades.columns = ['Morbidade', 'Contagem']
                contagem_morbidades['Morbidade Limpa'] = contagem_morbidades['Morbidade'].str.replace('Apresenta algumas das morbidades (', '').str.replace(')', '')
            
                if not contagem_morbidades.empty:
                    total_morbidades_sim = contagem_morbidades['Contagem'].sum()
                    contagem_morbidades['Porcentagem'] = (contagem_morbidades['Contagem'] / total_morbidades_sim) * 100
                    contagem_morbidades['Morbidade_ID'] = range(1, len(contagem_morbidades) + 1)
            
                    # Criar figura com dois subplots - um para a legenda e outro para o treemap
                    fig = plt.figure(figsize=(14, 12))
                    
                    # Subplot 1 - apenas para a legenda (topo)
                    ax1 = plt.subplot2grid((10, 1), (0, 0), rowspan=2)
                    ax1.axis('off')
                    
                    # Subplot 2 - para o treemap (parte inferior)
                    ax2 = plt.subplot2grid((10, 1), (2, 0), rowspan=8)
                    
                    colors = [plt.cm.viridis(i / float(len(contagem_morbidades['Contagem']))) for i in range(len(contagem_morbidades['Contagem']))]
            
                    # Gerar a legenda no subplot superior
                    legend_labels = []
                    for index, row in contagem_morbidades.iterrows():
                        legend_labels.append(
                            f"{row['Morbidade_ID']}: {row['Morbidade Limpa']} "
                            f"({row['Contagem']} - {row['Porcentagem']:.1f}%)"
                        )
            
                    legend_patches = [plt.Rectangle((0, 0), 1, 1, fc=colors[i], ec="none") for i in range(len(colors))]
                    
                    # Criar legenda no subplot superior
                    ax1.legend(legend_patches, legend_labels, title="Detalhes das Morbidades",
                              loc='center', ncol=2, fontsize=9)
                    
                    # Gerar o treemap no subplot inferior
                    squarify.plot(
                        sizes=contagem_morbidades['Contagem'],
                        label=contagem_morbidades['Morbidade_ID'].astype(str),
                        color=colors,
                        alpha=.8,
                        pad=True,
                        text_kwargs={'fontsize': 10, 'weight': 'bold', 'color': 'white'},
                        ax=ax2
                    )
            
                    ax2.set_title('Distribui√ß√£o das Morbidades', fontsize=12)
                    ax2.axis('off')
                    
                    plt.tight_layout()
                    st.pyplot(fig, use_container_width=True)
                    plt.close(fig)
                else:
                    st.warning("N√£o h√° dados de morbidades 'Sim' para gerar a treemap ap√≥s os filtros.")
            else:
                st.warning("N√£o foram encontradas colunas de morbidades ou DataFrame vazio.")

            # -----------------------------------------
            col1_saude_row8, col2_saude_row8 = st.columns(2) 
    
            with col1_saude_row8:
                # --- Gr√°fico de Doen√ßas Apesar das Imuniza√ß√µes ---
                st.subheader("Doen√ßas Apesar das Imuniza√ß√µes")
                
                # 1. Definir as colunas de imuniza√ß√£o (Vacinas)
                colunas_imunizacao = [
                    'Apesar das imuniza√ß√µes, teve alguma dessas doen√ßas (Tuberculose)',
                    'Apesar das imuniza√ß√µes, teve alguma dessas doen√ßas (Hepatite B)',
                    'Apesar das imuniza√ß√µes, teve alguma dessas doen√ßas (Poliomielite)',
                    'Apesar das imuniza√ß√µes, teve alguma dessas doen√ßas (Diarreia por rotav√≠rus)',
                    'Apesar das imuniza√ß√µes, teve alguma dessas doen√ßas (Dfiteria)',
                    'Apesar das imuniza√ß√µes, teve alguma dessas doen√ßas (T√©tano)',
                    'Apesar das imuniza√ß√µes, teve alguma dessas doen√ßas (Coqueluche)',
                    'Apesar das imuniza√ß√µes, teve alguma dessas doen√ßas (Haemophilus influenzae B)',
                    'Apesar das imuniza√ß√µes, teve alguma dessas doen√ßas (Pneumonia)',
                    'Apesar das imuniza√ß√µes, teve alguma dessas doen√ßas (Meningite)',
                    'Apesar das imuniza√ß√µes, teve alguma dessas doen√ßas (Febre amarela)',
                    'Apesar das imuniza√ß√µes, teve alguma dessas doen√ßas (Sarampo)',
                    'Apesar das imuniza√ß√µes, teve alguma dessas doen√ßas (Caxumba)',
                    'Apesar das imuniza√ß√µes, teve alguma dessas doen√ßas (Rub√©ola)',
                    'Apesar das imuniza√ß√µes, teve alguma dessas doen√ßas (Varicela/catapora)',
                    'Apesar das imuniza√ß√µes, teve alguma dessas doen√ßas (Hepatite A)',
                    'Apesar das imuniza√ß√µes, teve alguma dessas doen√ßas (Papiloma v√≠rus)',
                    'Apesar das imuniza√ß√µes, teve alguma dessas doen√ßas (Dengue)',
                    'Apesar das imuniza√ß√µes, teve alguma dessas doen√ßas (N√£o teve)',
                ]
                
                # Filtrar apenas as colunas que existem no DataFrame filtrado
                colunas_existentes_imunizacao = [col for col in colunas_imunizacao if col in df_filtrado.columns]
                
                if not colunas_existentes_imunizacao:
                    st.warning("Nenhuma coluna de doen√ßas p√≥s-imuniza√ß√£o encontrada ap√≥s os filtros aplicados.")
                else:
                    contagens_vacinas = {}
                    total_participantes = len(df_filtrado)
                    
                    if total_participantes == 0:
                        st.info("Nenhum participante encontrado com os filtros selecionados.")
                    else:
                        df_temp = df_filtrado.copy()
                        
                        for col_imunizacao in colunas_existentes_imunizacao:
                            # Padronizar valores
                            df_temp[col_imunizacao] = df_temp[col_imunizacao].astype(str).str.strip().str.lower()
                            df_temp[col_imunizacao] = df_temp[col_imunizacao].apply(lambda x: 'Sim' if x == 'sim' else 'N√£o')
                            
                            # Contar ocorr√™ncias
                            count_sim = df_temp[df_temp[col_imunizacao] == 'Sim'].shape[0]
                            
                            # Extrair nome limpo
                            if '(' in col_imunizacao and ')' in col_imunizacao:
                                nome_doenca = col_imunizacao.split('(')[-1].replace(')', '')
                            else:
                                nome_doenca = col_imunizacao
                            
                            if count_sim > 0:
                                contagens_vacinas[nome_doenca] = count_sim
                        
                        if not contagens_vacinas:
                            st.info("Nenhuma doen√ßa reportada ap√≥s imuniza√ß√£o com os filtros selecionados.")
                        else:
                            contagem_series = pd.Series(contagens_vacinas).sort_values(ascending=True)
                            
                            fig, ax = plt.subplots(figsize=(8, max(6, len(contagem_series) * 0.4)))
                            bars = ax.barh(contagem_series.index, contagem_series.values, color='#79aba2', edgecolor='#79aba2')
                            
                            # Adicionar porcentagens
                            for i, (doenca, valor) in enumerate(contagem_series.items()):
                                percentual = (valor / total_participantes) * 100
                                ax.text(valor + (contagem_series.max() * 0.02), i, 
                                        f'{percentual:.1f}%', va='center', fontsize=9)
                            
                            ax.set_xlim(0, contagem_series.max() * 1.25)
                            ax.set_title('Doen√ßas contra√≠das apesar das imuniza√ß√µes', fontsize=14)
                            ax.set_xlabel('Frequ√™ncia')
                            ax.set_ylabel('Doen√ßas')
                            ax.grid(axis='x', linestyle='--', alpha=0.5)
                            
                            for spine in ax.spines.values():
                                spine.set_visible(True)
                                spine.set_linewidth(1.2)
                            
                            plt.tight_layout()
                            st.pyplot(fig, use_container_width=True)
                            plt.close(fig)
            
            with col2_saude_row8:
                # --- Gr√°fico de Gravidade da COVID ---
                st.subheader("Gravidade da COVID")
                
                if 'Gravidade da COVID do participante' not in df_filtrado.columns:
                    st.warning("Coluna 'Gravidade da COVID do participante' n√£o encontrada.")
                else:
                    contagem = df_filtrado['Gravidade da COVID do participante'].value_counts()
                    total = contagem.sum()
                    
                    if total == 0:
                        st.info("Nenhum dado dispon√≠vel sobre gravidade da COVID com os filtros aplicados.")
                    else:
                        fig, ax = plt.subplots(figsize=(6, 5))
                        bars = ax.barh(contagem.index.astype(str), contagem.values, color='#c3c2ff', edgecolor='#c3c2ff')
                        
                        # Adicionar porcentagens
                        for i, (categoria, valor) in enumerate(contagem.items()):
                            percentual = (valor / total) * 100
                            ax.text(valor + 5, i, f'{percentual:.1f}%', va='center', fontsize=9)
                        
                        ax.set_xlim(0, contagem.max() * 1.2)
                        ax.set_title('Gravidade da COVID entre participantes', fontsize=14)
                        ax.set_xlabel('Frequ√™ncia')
                        ax.set_ylabel('Gravidade')
                        ax.grid(axis='x', linestyle='--', alpha=0.5)
                        
                        for spine in ax.spines.values():
                            spine.set_visible(True)
                            spine.set_linewidth(1.2)
                        
                        plt.tight_layout()
                        st.pyplot(fig, use_container_width=True)
                        plt.close(fig)
    
            # ---------------------
            # Tabela de distribui√ß√£o de doses de vacina COVID-19
            st.subheader("Distribui√ß√£o de Doses de Vacina COVID-19")
            
            # Definir as colunas de interesse
            doses = [
                'Tomou a 1¬™ dose da COVID',
                'Tomou a 2¬™ dose da COVID',
                'Tomou a 3¬™ dose da COVID',
                'Tomou a 4¬™ dose da COVID',
                'Tomou a 5¬™ dose da COVID',
                'Tomou a 6¬™ dose da COVID'
            ]
            
            # Verificar quais colunas existem no DataFrame
            doses_existentes = [col for col in doses if col in df_filtrado.columns]
            
            if not doses_existentes:
                st.warning("Nenhuma informa√ß√£o sobre doses de vacina dispon√≠vel.")
            else:
                # Criar DataFrame vazio com o formato desejado
                tabela_resultado = pd.DataFrame(index=['N√£o', 'Sim'], columns=doses_existentes)
                
                # Preencher o DataFrame com as contagens
                for dose in doses_existentes:
                    # Contar valores 'Sim' e 'N√£o', considerando NaN como 'N√£o'
                    contagens = df_filtrado[dose].fillna('N√£o').value_counts()
                    
                    # Preencher os valores na tabela
                    tabela_resultado.loc['N√£o', dose] = contagens.get('N√£o', 0)
                    tabela_resultado.loc['Sim', dose] = contagens.get('Sim', 0)
                
                # Converter todos valores para inteiros
                tabela_resultado = tabela_resultado.fillna(0).astype(int)
                
                # Exibir a tabela formatada
                st.dataframe(
                    tabela_resultado.style
                        .format("{:d}")  # Formato inteiro sem decimais
                        .set_properties(**{'text-align': 'center'})
                        .set_table_styles([{
                            'selector': 'th',
                            'props': [('background-color', '#f0f2f6'), 
                                     ('font-weight', 'bold'),
                                     ('text-align', 'center')]
                        }]),
                    use_container_width=True
                )
                
                # Adicionar informa√ß√£o do total de respondentes
                st.caption(f"Total de participantes analisados: {len(df_filtrado)}")
            # ---------------------
            # --- GR√ÅFICO DE MEDICA√á√ïES (FULL WIDTH) ---
            st.subheader("Medica√ß√µes Utilizadas pelos Participantes")
            
            colunas_medicacoes = [
                'O participante toma alguma dessas medica√ß√µes (Antidepressivo/ansiolitico)',
                'O participante toma alguma dessas medica√ß√µes (Anti-hipertensivo/ICC)',
                'O participante toma alguma dessas medica√ß√µes (Antidiab√©tico em geral)',
                'O participante toma alguma dessas medica√ß√µes (Estatina/antidislipidemico)',
                'O participante toma alguma dessas medica√ß√µes (Repositor hormonal da tireoide)',
                'O participante toma alguma dessas medica√ß√µes (Vitamina D)',
                'O participante toma alguma dessas medica√ß√µes (Glicocorticoide)',
                'O participante toma alguma dessas medica√ß√µes (Outros)',
                'O participante toma alguma dessas medica√ß√µes (N√£o toma medica√ß√£o)',
            ]
            
            colunas_existentes = [col for col in colunas_medicacoes if col in df_filtrado.columns]
            
            if not colunas_existentes:
                st.warning("Nenhuma informa√ß√£o sobre medica√ß√µes dispon√≠vel.")
            else:
                contagens = {}
                total = len(df_filtrado)
                
                for col in colunas_existentes:
                    # Padronizar valores
                    df_filtrado[col] = df_filtrado[col].astype(str).str.strip().str.lower()
                    count_sim = (df_filtrado[col] == 'sim').sum()
                    
                    # Extrair nome da medica√ß√£o
                    nome = col.split('(')[-1].replace(')', '') if '(' in col else col
                    contagens[nome] = count_sim
                
                if not contagens:
                    st.info("Nenhuma medica√ß√£o com contagens positivas.")
                else:
                    serie_contagens = pd.Series(contagens).sort_values()
                    
                    fig, ax = plt.subplots(figsize=(10, max(4, len(serie_contagens)*0.5)))  # Ajustado para full width
                    bars = ax.barh(serie_contagens.index, serie_contagens.values, color='#fbc599')
                    
                    # Adicionar porcentagens
                    for i, (med, valor) in enumerate(serie_contagens.items()):
                        percent = (valor/total)*100
                        ax.text(valor + serie_contagens.max()*0.02, i, 
                                f'({percent:.1f}%)', va='center', fontsize=10)
                    
                    ax.set_xlim(0, serie_contagens.max()*1.3)  # Aumentado espa√ßo para texto
                    ax.set_title('Uso de Medica√ß√µes pelos Participantes', fontsize=16, pad=20)
                    ax.set_xlabel('Frequ√™ncia', fontsize=12)
                    ax.set_ylabel('Tipo de Medica√ß√£o', fontsize=12)
                    ax.grid(axis='x', linestyle='--', alpha=0.7)
                    
                    # Melhorar a est√©tica
                    for spine in ax.spines.values():
                        spine.set_visible(True)
                        spine.set_linewidth(1.5)
                    
                    plt.tight_layout()
                    st.pyplot(fig, use_container_width=True)
                    plt.close(fig)

            col1_saude_row9, col2_saude_row9 = st.columns(2) 
            
            with col1_saude_row9:
                # --- GR√ÅFICO DE ATIVIDADE F√çSICA ---
                st.subheader("Pr√°tica de Atividade F√≠sica")
                
                if 'Pratica alguma atividade f√≠sica ou esporte' not in df_filtrado.columns:
                    st.warning("Dados sobre atividade f√≠sica n√£o dispon√≠veis.")
                else:
                    # Processar dados
                    df_filtrado['Atividade_Fisica'] = (
                        df_filtrado['Pratica alguma atividade f√≠sica ou esporte']
                        .astype(str)
                        .str.lower()
                        .str.strip()
                    )
                    
                    contagem = df_filtrado['Atividade_Fisica'].value_counts()
                    total = contagem.sum()
                    
                    # Ordenar e formatar
                    ordem = ['n√£o', 'sim']
                    contagem = contagem.reindex(ordem).dropna()
                    labels = [s.capitalize() for s in contagem.index]
                    
                    if contagem.empty:
                        st.info("Nenhum dado dispon√≠vel sobre atividade f√≠sica.")
                    else:
                        fig, ax = plt.subplots(figsize=(6, 5))
                        bars = ax.bar(labels, contagem.values, color='#aef055')
                        
                        # Adicionar porcentagens
                        for bar in bars:
                            height = bar.get_height()
                            percent = (height/total)*100
                            ax.text(bar.get_x() + bar.get_width()/2, height + 1,
                                    f'{percent:.1f}%', ha='center', va='bottom')
                        
                        ax.set_title('Pr√°tica de Atividade F√≠sica', fontsize=14)
                        ax.set_xlabel('Resposta')
                        ax.set_ylabel('N√∫mero de Participantes')
                        ax.grid(axis='y', linestyle='--', alpha=0.5)
                        
                        st.pyplot(fig, use_container_width=True)
                        plt.close(fig)
                        
            # ---------------------            
            with col2_saude_row9:
                # --- GR√ÅFICO DE FREQU√äNCIA DE ATIVIDADE F√çSICA ---
                st.subheader("Frequ√™ncia Semanal de Atividade F√≠sica")
                
                if 'O participante pratica atividade f√≠sica ou esporte quantas vezes na semana' not in df_filtrado.columns:
                    st.warning("Dados sobre frequ√™ncia de atividade f√≠sica n√£o dispon√≠veis.")
                else:
                    # Processar os dados
                    contagem = df_filtrado['O participante pratica atividade f√≠sica ou esporte quantas vezes na semana'].value_counts()
                    total = contagem.sum()
                    
                    if total == 0:
                        st.info("Nenhum dado dispon√≠vel sobre frequ√™ncia de atividade f√≠sica.")
                    else:
                        # Criar gr√°fico
                        fig, ax = plt.subplots(figsize=(6, 5))
                        bars = ax.barh(contagem.index.astype(str), contagem.values, color='#9b5f7b', edgecolor='#9b5f7b')
                        
                        # Adicionar porcentagens
                        for i, (categoria, valor) in enumerate(contagem.items()):
                            percentual = (valor / total) * 100
                            ax.text(valor + 5, i, f'{percentual:.1f}%', va='center', fontsize=9)
                        
                        # Configura√ß√µes do gr√°fico
                        ax.set_xlim(0, contagem.max() * 1.2)
                        ax.set_title('Frequ√™ncia Semanal de Atividade F√≠sica', fontsize=14)
                        ax.set_xlabel('N√∫mero de Participantes')
                        ax.set_ylabel('Vezes por Semana')
                        ax.grid(axis='x', linestyle='--', alpha=0.5)
                        
                        # Exibir no Streamlit
                        st.pyplot(fig, use_container_width=True)
                        plt.close(fig)

            # Criar layout de duas colunas
            col1_saude_row10, col2_saude_row10 = st.columns(2) 
            
            with col1_saude_row10:
                # --- GR√ÅFICO DE H√ÅBITOS ALIMENTARES ---
                st.subheader("H√°bitos Alimentares Saud√°veis")
                
                if 'Voc√™ considera que o participante possui h√°bitos alimentares saud√°veis' not in df_filtrado.columns:
                    st.warning("Dados sobre h√°bitos alimentares n√£o dispon√≠veis.")
                else:
                    # Processar os dados
                    df_filtrado['Habitos_Alimentares'] = (
                        df_filtrado['Voc√™ considera que o participante possui h√°bitos alimentares saud√°veis']
                        .astype(str)
                        .str.lower()
                        .str.strip()
                    )
                    
                    contagem = df_filtrado['Habitos_Alimentares'].value_counts()
                    total = contagem.sum()
                    
                    if total == 0:
                        st.info("Nenhum dado dispon√≠vel sobre h√°bitos alimentares.")
                    else:
                        # Ordenar e formatar
                        ordem_desejada = ['n√£o', 'sim']
                        contagem = contagem.reindex(ordem_desejada).dropna()
                        labels = [s.capitalize() for s in contagem.index]
                        
                        # Criar gr√°fico
                        fig, ax = plt.subplots(figsize=(6, 5))
                        bars = ax.bar(labels, contagem.values, color='#b7833a', edgecolor='#b7833a')
                        
                        # Adicionar porcentagens
                        for bar in bars:
                            height = bar.get_height()
                            percentual = (height / total) * 100
                            ax.text(bar.get_x() + bar.get_width() / 2, height + 1, 
                                    f'{percentual:.1f}%', ha='center', va='bottom', fontsize=9)
                        
                        # Configura√ß√µes do gr√°fico
                        ax.set_title('H√°bitos Alimentares Saud√°veis', fontsize=14)
                        ax.set_xlabel('Resposta')
                        ax.set_ylabel('N√∫mero de Participantes')
                        ax.grid(axis='y', linestyle='--', alpha=0.5)
                        
                        # Exibir no Streamlit
                        st.pyplot(fig, use_container_width=True)
                        plt.close(fig)
            # ---------------------
            with col2_saude_row10:
                # --- GR√ÅFICO DE ATENDIMENTO DE SA√öDE P√öBLICO ---
                st.subheader("Atendimento de Sa√∫de P√∫blico Adequado")
                
                coluna_saude = 'Voc√™ considera que o participante possui atendimento de sa√∫de adequado pelo sistema p√∫blico para atender suas necessidades'
                
                if coluna_saude not in df_filtrado.columns:
                    st.warning("Dados sobre atendimento de sa√∫de p√∫blico n√£o dispon√≠veis.")
                else:
                    # Processar os dados
                    df_filtrado['Atendimento_Saude'] = (
                        df_filtrado[coluna_saude]
                        .astype(str)
                        .str.lower()
                        .str.strip()
                    )
                    
                    contagem = df_filtrado['Atendimento_Saude'].value_counts()
                    total = contagem.sum()
                    
                    if total == 0:
                        st.info("Nenhum dado dispon√≠vel sobre atendimento de sa√∫de p√∫blico.")
                    else:
                        # Ordenar e formatar
                        ordem_desejada = ['n√£o', 'sim']
                        contagem = contagem.reindex(ordem_desejada).dropna()
                        labels = [s.capitalize() for s in contagem.index]
                        
                        # Criar gr√°fico
                        fig, ax = plt.subplots(figsize=(6, 5))
                        bars = ax.bar(labels, contagem.values, color='#838689', edgecolor='#838689')
                        
                        # Adicionar porcentagens
                        for bar in bars:
                            height = bar.get_height()
                            percentual = (height / total) * 100
                            ax.text(bar.get_x() + bar.get_width() / 2, height + 1, 
                                   f'{percentual:.1f}%', ha='center', va='bottom', fontsize=9)
                        
                        # Configura√ß√µes do gr√°fico
                        ax.set_title('Atendimento de Sa√∫de P√∫blico Adequado', fontsize=14)
                        ax.set_xlabel('Resposta')
                        ax.set_ylabel('N√∫mero de Participantes')
                        ax.grid(axis='y', linestyle='--', alpha=0.5)
                        
                        # Exibir no Streamlit
                        st.pyplot(fig, use_container_width=True)
                        plt.close(fig)

    
            # -----

        with tab6:
            st.header("Caracter√≠sticas de Participa√ß√£o, Autonomia e Intera√ß√£o Social")
            # --- ABA 6: Caracter√≠sticas de Pariticipa√ß√£o, Autonomia e Intera√ß√£o Social (Novos Gr√°ficos Matplotlib em Colunas) ---
            col_autonomia, col_deslocamento = st.columns(2)
            col_necessidades, col_relacionamento = st.columns(2)
            col_interacao_social, col_respeito = st.columns(2)
            
            # --- Gr√°fico 1: Autonomia para Tomar Decis√µes ---
            with col_autonomia:
                st.subheader("Autonomia para Tomar Decis√µes")
                coluna_autonomia = 'Voc√™ considera que o participante possui autonomia para tomar decis√µes e tem a chance de escolher as coisas que deseja (escolher as coisas para sua satisfa√ß√£o pessoal)?'

                if coluna_autonomia in df_filtrado.columns and not df_filtrado.empty:
                    temp_series = df_filtrado[coluna_autonomia].astype(str).str.lower().str.strip()
                    contagem = temp_series.value_counts()
                    total_participantes = len(df_filtrado)
        
                    # Ordenar para garantir "N√£o" antes de "Sim" se ambos existirem
                    ordem_desejada = ['n√£o', 'sim']
                    contagem_ordenada = contagem.reindex(ordem_desejada).dropna()
                    labels_formatados = [s.capitalize() for s in contagem_ordenada.index]
        
                    if total_participantes == 0 or contagem_ordenada.empty:
                        st.info("Nenhum dado para exibir para Autonomia para Tomar Decis√µes com os filtros selecionados.")
                    else:
                        fig, ax = plt.subplots(figsize=(6, 5))
                        bars = ax.bar(labels_formatados, contagem_ordenada.values, color='#8ccc81', edgecolor='#8ccc81')
        
                        for i, bar in enumerate(bars):
                            height = bar.get_height()
                            percentual = (height / total_participantes) * 100
                            ax.text(bar.get_x() + bar.get_width() / 2, height + 1,
                                    f'{percentual:.1f}%', # Apenas porcentagem
                                    ha='center', va='bottom', fontsize=9, color='black')
        
                        ax.set_ylim(0, contagem_ordenada.max() * 1.15)
                        ax.set_title('Possui autonomia para tomar decis√µes') # T√≠tulo mais conciso
                        ax.set_xlabel('Resposta')
                        ax.set_ylabel('Frequ√™ncia')
                        ax.tick_params(axis='x', rotation=0, labelsize=10) # Ajuste para Streamlit
                        ax.grid(axis='y', linestyle='--', alpha=0.5)
                        plt.tight_layout()
                        for spine in ax.spines.values():
                            spine.set_visible(True)
                            spine.set_linewidth(1.2)
                        st.pyplot(fig, use_container_width=True)
                        plt.close(fig)
                else:
                    st.warning(f"Coluna '{coluna_autonomia}' n√£o encontrada ou DataFrame vazio para esta sele√ß√£o.")

    # --- Gr√°fico 2: Deslocamento Independentemente pela Cidade ---
            with col_deslocamento:
                st.subheader("Deslocamento Independente")
                coluna_deslocamento = 'O participante se desloca independentemente pela cidade'

                if coluna_deslocamento in df_filtrado.columns and not df_filtrado.empty:
                    temp_series = df_filtrado[coluna_deslocamento].astype(str).str.lower().str.strip()
                    contagem = temp_series.value_counts()
                    total_participantes = len(df_filtrado)
        
                    ordem_desejada = ['n√£o', 'sim']
                    contagem_ordenada = contagem.reindex(ordem_desejada).dropna()
                    labels_formatados = [s.capitalize() for s in contagem_ordenada.index]
        
                    if total_participantes == 0 or contagem_ordenada.empty:
                        st.info("Nenhum dado para exibir para Deslocamento Independente com os filtros selecionados.")
                    else:
                        fig, ax = plt.subplots(figsize=(6, 5))
                        bars = ax.bar(labels_formatados, contagem_ordenada.values, color='#bcc499', edgecolor='#bcc499')
        
                        for i, bar in enumerate(bars):
                            height = bar.get_height()
                            percentual = (height / total_participantes) * 100
                            ax.text(bar.get_x() + bar.get_width() / 2, height + 1,
                                    f'{percentual:.1f}%', # Apenas porcentagem
                                    ha='center', va='bottom', fontsize=9, color='black')
        
                        ax.set_ylim(0, contagem_ordenada.max() * 1.15)
                        ax.set_title('Se desloca independentemente pela cidade') # T√≠tulo mais conciso
                        ax.set_xlabel('Resposta')
                        ax.set_ylabel('Frequ√™ncia')
                        ax.tick_params(axis='x', rotation=0, labelsize=10)
                        ax.grid(axis='y', linestyle='--', alpha=0.5)
                        plt.tight_layout()
                        for spine in ax.spines.values():
                            spine.set_visible(True)
                            spine.set_linewidth(1.2)
                        st.pyplot(fig, use_container_width=True)
                        plt.close(fig)
                else:
                    st.warning(f"Coluna '{coluna_deslocamento}' n√£o encontrada ou DataFrame vazio para esta sele√ß√£o.")

    # --- GR√ÅFICO 3: Necessidades Pessoais ---
            with col_necessidades: # Usando a primeira coluna da segunda linha
                st.subheader("Realiza√ß√£o de Necessidades Pessoais")
                coluna_necessidades = 'Na maioria das vezes, voc√™ considera o participante na realiza√ß√£o de suas necessidades pessoais como'
    
                if coluna_necessidades in df_filtrado.columns and not df_filtrado.empty:
                    temp_series = df_filtrado[coluna_necessidades].astype(str).str.lower().str.strip()
                    contagem = temp_series.value_counts(dropna=False)
    
                    if 'nan' in contagem.index:
                        contagem = contagem.rename(index={'nan': 'N√£o Preenchido'})
                        # Se voc√™ N√ÉO QUISER que 'N√£o Preenchido' apare√ßa no gr√°fico, descomente a linha abaixo:
                        # contagem = contagem.drop('N√£o Preenchido', errors='ignore')
    
                    total_participantes = len(df_filtrado) # Usar df_filtrado para o total de participantes
    
                    contagem = contagem.sort_values(ascending=True)
    
                    if total_participantes == 0 or contagem.empty:
                        st.info("Nenhum dado para exibir para Necessidades Pessoais com os filtros selecionados.")
                    else:
                        fig, ax = plt.subplots(figsize=(10, max(6, len(contagem) * 0.7))) # Ajuste o figsize para barras horizontais
                        labels_formatados = [s.capitalize() for s in contagem.index]
                        bars = ax.barh(labels_formatados, contagem.values, color='#f8afb8', edgecolor='#f8afb8')
    
                        for i, (categoria_original, valor) in enumerate(contagem.items()):
                            percentual = (valor / total_participantes) * 100
                            ax.text(valor + (contagem.max() * 0.02), i, f'{percentual:.1f}%', va='center', fontsize=9)
    
                        ax.set_xlim(0, contagem.max() * 1.15)
                        ax.set_title('Como o cuidador considera o participante na realiza√ß√£o de necessidades pessoais')
                        ax.set_xlabel('Frequ√™ncia')
                        ax.set_ylabel('Forma de Independ√™ncia')
                        ax.grid(axis='x', linestyle='--', alpha=0.5)
                        plt.tight_layout()
                        for spine in ax.spines.values():
                            spine.set_visible(True)
                            spine.set_linewidth(1.2)
                        st.pyplot(fig, use_container_width=True)
                        plt.close(fig)
                else:
                    st.warning(f"Coluna '{coluna_necessidades}' n√£o encontrada ou DataFrame vazio para esta sele√ß√£o.")                

    # --- Gr√°fico 4: Participante se Relaciona com Diferentes Pessoas ---
            with col_relacionamento:
                st.subheader("Relacionamento Interpessoal")
                coluna_relacionamento = 'Voc√™ considera que o participante se relaciona com diferentes pessoas, tem amigos e se d√° bem com as pessoas'
    
                if coluna_relacionamento in df_filtrado.columns and not df_filtrado.empty:
                    temp_series = df_filtrado[coluna_relacionamento].astype(str).str.lower().str.strip()
                    contagem = temp_series.value_counts()
                    total_participantes = len(df_filtrado)
        
                    ordem_desejada = ['n√£o', 'sim']
                    contagem_ordenada = contagem.reindex(ordem_desejada).dropna()
                    labels_formatados = [s.capitalize() for s in contagem_ordenada.index]
        
                    if total_participantes == 0 or contagem_ordenada.empty:
                        st.info("Nenhum dado para exibir para Relacionamento Interpessoal com os filtros selecionados.")
                    else:
                        fig, ax = plt.subplots(figsize=(6, 5))
                        bars = ax.bar(labels_formatados, contagem_ordenada.values, color='#525574', edgecolor='#525574')
        
                        for i, bar in enumerate(bars):
                            height = bar.get_height()
                            percentual = (height / total_participantes) * 100
                            ax.text(bar.get_x() + bar.get_width() / 2, height + 1,
                                    f'{percentual:.1f}%', # Apenas porcentagem
                                    ha='center', va='bottom', fontsize=9, color='black')
        
                        ax.set_ylim(0, contagem_ordenada.max() * 1.15)
                        ax.set_title('Se relaciona com diferentes pessoas e tem amigos') # T√≠tulo mais conciso
                        ax.set_xlabel('Resposta')
                        ax.set_ylabel('Frequ√™ncia')
                        ax.tick_params(axis='x', rotation=0, labelsize=10)
                        ax.grid(axis='y', linestyle='--', alpha=0.5)
                        plt.tight_layout()
                        for spine in ax.spines.values():
                            spine.set_visible(True)
                            spine.set_linewidth(1.2)
                        st.pyplot(fig, use_container_width=True)
                        plt.close(fig)
                else:
                    st.warning(f"Coluna '{coluna_relacionamento}' n√£o encontrada ou DataFrame vazio para esta sele√ß√£o.")

    # --- Gr√°fico 5: Intera√ß√£o Social (frequenta lugares) ---
            with col_interacao_social:
                st.subheader("Intera√ß√£o Social Volunt√°ria")
                coluna_interacao_social = 'Voc√™ considera que o participante, por vontade pr√≥pria interage socialmente, frequentando diferentes lugares da cidade ou do bairro'

                if coluna_interacao_social in df_filtrado.columns and not df_filtrado.empty:
                    temp_series = df_filtrado[coluna_interacao_social].astype(str).str.lower().str.strip()
                    contagem = temp_series.value_counts()
                    total_participantes = len(df_filtrado)
        
                    ordem_desejada = ['n√£o', 'sim']
                    contagem_ordenada = contagem.reindex(ordem_desejada).dropna()
                    labels_formatados = [s.capitalize() for s in contagem_ordenada.index]
        
                    if total_participantes == 0 or contagem_ordenada.empty:
                        st.info("Nenhum dado para exibir para Intera√ß√£o Social Volunt√°ria com os filtros selecionados.")
                    else:
                        fig, ax = plt.subplots(figsize=(6, 5))
                        bars = ax.bar(labels_formatados, contagem_ordenada.values, color='#ff9934', edgecolor='#ff9934')
        
                        for i, bar in enumerate(bars):
                            height = bar.get_height()
                            percentual = (height / total_participantes) * 100
                            ax.text(bar.get_x() + bar.get_width() / 2, height + 1,
                                    f'{percentual:.1f}%', # Apenas porcentagem
                                    ha='center', va='bottom', fontsize=9, color='black')
        
                        ax.set_ylim(0, contagem_ordenada.max() * 1.15)
                        ax.set_title('Interage socialmente em diferentes lugares') # T√≠tulo mais conciso
                        ax.set_xlabel('Resposta')
                        ax.set_ylabel('Frequ√™ncia')
                        ax.tick_params(axis='x', rotation=0, labelsize=10)
                        ax.grid(axis='y', linestyle='--', alpha=0.5)
                        plt.tight_layout()
                        for spine in ax.spines.values():
                            spine.set_visible(True)
                            spine.set_linewidth(1.2)
                        st.pyplot(fig, use_container_width=True)
                        plt.close(fig)
                else:
                    st.warning(f"Coluna '{coluna_interacao_social}' n√£o encontrada ou DataFrame vazio para esta sele√ß√£o.")

    # --- Gr√°fico 6: Tratado com Respeito, Dignidade e Igualdade ---
            with col_respeito: # Esta coluna foi definida para ocupar uma linha inteira
                st.subheader(" Olhar do Cuidador Quanto a Tratamento com Respeito, Dignidade e Igualdade")
                coluna_respeito = 'Voc√™ considera que o participante √© tratado com respeito, dignidade e igualdade pelas outras pessoas'

                if coluna_respeito in df_filtrado.columns and not df_filtrado.empty:
                    temp_series = df_filtrado[coluna_respeito].astype(str).str.lower().str.strip()
                    contagem = temp_series.value_counts()
                    total_participantes = len(df_filtrado)
        
                    ordem_desejada = ['n√£o', 'sim']
                    contagem_ordenada = contagem.reindex(ordem_desejada).dropna()
                    labels_formatados = [s.capitalize() for s in contagem_ordenada.index]
        
                    if total_participantes == 0 or contagem_ordenada.empty:
                        st.info("Nenhum dado para exibir para Tratamento com Respeito com os filtros selecionados.")
                    else:
                        fig, ax = plt.subplots(figsize=(6, 5))
                        bars = ax.bar(labels_formatados, contagem_ordenada.values, color='#680a1d', edgecolor='#680a1d')
        
                        for i, bar in enumerate(bars):
                            height = bar.get_height()
                            percentual = (height / total_participantes) * 100
                            ax.text(bar.get_x() + bar.get_width() / 2, height + 1,
                                    f'{percentual:.1f}%', # Apenas porcentagem
                                    ha='center', va='bottom', fontsize=9, color='black')
        
                        ax.set_ylim(0, contagem_ordenada.max() * 1.15)
                        ax.set_title('Participante √© tratado com respeito, dignidade e igualdade') # T√≠tulo mais conciso
                        ax.set_xlabel('Resposta')
                        ax.set_ylabel('Frequ√™ncia')
                        ax.tick_params(axis='x', rotation=0, labelsize=10)
                        ax.grid(axis='y', linestyle='--', alpha=0.5)
                        plt.tight_layout()
                        for spine in ax.spines.values():
                            spine.set_visible(True)
                            spine.set_linewidth(1.2)
                        st.pyplot(fig, use_container_width=True)
                        plt.close(fig)
                else:
                    st.warning(f"Coluna '{coluna_respeito}' n√£o encontrada ou DataFrame vazio para esta sele√ß√£o.")

        # ---------------------
        # --- ABA 7: Correla√ß√µes (Heatmap com estilo visual harmonizado) ---
        with tab7:
            st.header("Correla√ß√µes")
            st.markdown("""
            <div class="justified-text">
            Esta se√ß√£o apresenta as correla√ß√µes entre as principais vari√°veis do estudo. 
            A matriz de correla√ß√£o de Spearman √© utilizada para identificar rela√ß√µes significativas entre 
            caracter√≠sticas sociodemogr√°ficas, educacionais e de sa√∫de, sendo mais robusta para dados n√£o-param√©tricos e ordinais.
            </div>
            """, unsafe_allow_html=True)
            
            # --- Heatmap 1: Socioecon√¥micas ---
            st.subheader("Correla√ß√£o de Vari√°veis Socioecon√¥micas")
            try:
                # Criar uma c√≥pia para evitar modificar o DataFrame original fora do escopo da fun√ß√£o
                df_corr = df_original.copy()
                
                # --- Tratamento de NaN e Substitui√ß√µes ---
                df_corr.replace('N√£o sabe', np.nan, inplace=True)
                df_corr.replace('NS', np.nan, inplace=True)
                df_corr.replace('nao sabe', np.nan, inplace=True)
                df_corr.replace('N√£o sabe o que √©', np.nan, inplace=True)
                df_corr.replace('sim', 'Sim', inplace=True)
                df_corr.replace('nao', 'N√£o', inplace=True)
                df_corr.replace('n√£o', 'N√£o', inplace=True)

                # --- Convers√£o de tipos de dados ---
                # A coluna 'Idade do participante' j√° deve ser num√©rica do load_data, mas garantimos aqui
                if 'Idade do participante' in df_corr.columns:
                    df_corr['Idade do participante'] = pd.to_numeric(df_corr['Idade do participante'], errors='coerce')

                # 'Quantos irm√£os o participante possui' - converter para num√©rico
                if 'Quantos irm√£os o participante possui' in df_corr.columns:
                    df_corr['Quantos irm√£os o participante possui'] = pd.to_numeric(df_corr['Quantos irm√£os o participante possui'], errors='coerce')
                else:
                    st.warning("Coluna 'Quantos irm√£os o participante possui' n√£o encontrada para correla√ß√£o.")
                    df_corr['Quantos irm√£os o participante possui'] = np.nan # Garante que a coluna existe para o pr√≥ximo passo

                # --- Aplicar codifica√ß√£o para vari√°veis categ√≥ricas que voc√™ quer na correla√ß√£o ---

                # Sexo do participante (Label Encoding)
                if 'Sexo do participante' in df_corr.columns:
                    le_sexo = LabelEncoder()
                    df_corr['Sexo do participante_encoded'] = df_corr['Sexo do participante'].fillna('N√£o informado').astype(str)
                    df_corr['Sexo do participante_encoded'] = le_sexo.fit_transform(df_corr['Sexo do participante_encoded'])
                else:
                    st.warning("Coluna 'Sexo do participante' n√£o encontrada para correla√ß√£o.")
                    df_corr['Sexo do participante_encoded'] = np.nan

                # Cor/etnia do participante (Label Encoding)
                if 'Cor/etnia do participante' in df_corr.columns:
                    le_cor_etnia = LabelEncoder()
                    df_corr['Cor/etnia do participante_encoded'] = df_corr['Cor/etnia do participante'].fillna('N√£o informado').astype(str)
                    df_corr['Cor/etnia do participante_encoded'] = le_cor_etnia.fit_transform(df_corr['Cor/etnia do participante_encoded'])
                else:
                    st.warning("Coluna 'Cor/etnia do participante' n√£o encontrada para correla√ß√£o.")
                    df_corr['Cor/etnia do participante_encoded'] = np.nan

                # Renda familiar (Ordinal Encoding)
                if 'Renda familiar' in df_corr.columns:
                    # **ATEN√á√ÉO**: Adapte as categorias e a ordem para o seu caso real!
                    # Certifique-se de que todas as categorias presentes na sua coluna est√£o aqui,
                    # caso contr√°rio, elas ser√£o tratadas como 'unknown_value'
                    categorias_renda = [
                        'At√© 1 sal√°rio m√≠nimo',
                        '1 a 2 sal√°rios m√≠nimos',
                        '2 a 3 sal√°rios m√≠nimos',
                        '3 a 4 sal√°rios m√≠nimos',
                        '4 a 5 sal√°rios m√≠nimos',
                        'Mais de 5 sal√°rios m√≠nimos'
                    ]
                    # Adicionando uma categoria para NaN ou valores n√£o esperados, para evitar erros
                    df_corr['Renda familiar_temp'] = df_corr['Renda familiar'].fillna('Missing').astype(str)
                    oe_renda = OrdinalEncoder(categories=[categorias_renda], handle_unknown='use_encoded_value', unknown_value=-1)
                    df_corr['Renda familiar_encoded'] = oe_renda.fit_transform(df_corr[['Renda familiar_temp']])
                else:
                    st.warning("Coluna 'Renda familiar' n√£o encontrada para correla√ß√£o.")
                    df_corr['Renda familiar_encoded'] = np.nan
                
                # Recebe Bolsa fam√≠lia (Label Encoding)
                if 'Recebe Bolsa fam√≠lia' in df_corr.columns:
                    le_bolsa = LabelEncoder()
                    df_corr['Recebe Bolsa fam√≠lia_encoded'] = df_corr['Recebe Bolsa fam√≠lia'].fillna('N√£o informado').astype(str)
                    df_corr['Recebe Bolsa fam√≠lia_encoded'] = le_bolsa.fit_transform(df_corr['Recebe Bolsa fam√≠lia_encoded'])
                else:
                    st.warning("Coluna 'Recebe Bolsa fam√≠lia' n√£o encontrada para correla√ß√£o.")
                    df_corr['Recebe Bolsa fam√≠lia_encoded'] = np.nan

                # Recebe BPC (Label Encoding)
                if 'Recebe BPC' in df_corr.columns:
                    le_bpc = LabelEncoder()
                    df_corr['Recebe BPC_encoded'] = le_bpc.fit_transform(df_corr['Recebe BPC'].fillna('N√£o informado').astype(str))
                else:
                    st.warning("Coluna 'Recebe BPC' n√£o encontrada para correla√ß√£o.")
                    df_corr['Recebe BPC_encoded'] = np.nan

                # A resid√™ncia √© (Label Encoding)
                if 'A resid√™ncia √©' in df_corr.columns:
                    le_residencia = LabelEncoder()
                    df_corr['A resid√™ncia √©_encoded'] = le_residencia.fit_transform(df_corr['A resid√™ncia √©'].fillna('N√£o informado').astype(str))
                else:
                    st.warning("Coluna 'A resid√™ncia √©' n√£o encontrada para correla√ß√£o.")
                    df_corr['A resid√™ncia √©_encoded'] = np.nan
                
                # 'O participante √© alfabetizado' (Label Encoding)
                if 'O participante √© alfabetizado' in df_corr.columns:
                    le_alfabetizado = LabelEncoder()
                    df_corr['O participante √© alfabetizado_encoded'] = df_corr['O participante √© alfabetizado'].fillna('N√£o informado').astype(str)
                    df_corr['O participante √© alfabetizado_encoded'] = le_alfabetizado.fit_transform(df_corr['O participante √© alfabetizado_encoded'])
                else:
                    st.warning("Coluna 'O participante √© alfabetizado' n√£o encontrada para correla√ß√£o.")
                    df_corr['O participante √© alfabetizado_encoded'] = np.nan


                # --- Sele√ß√£o das vari√°veis para a matriz de correla√ß√£o ---
                variaveis_correlacao = [
                    'Idade do participante', # Adicionei idade, se for interessante
                    'Sexo do participante_encoded',
                    'Cor/etnia do participante_encoded',
                    'Quantos irm√£os o participante possui',
                    'Renda familiar_encoded',
                    'Recebe Bolsa fam√≠lia_encoded',
                    'Recebe BPC_encoded',
                    'A resid√™ncia √©_encoded',
                    'O participante √© alfabetizado_encoded' # Adicionei alfabetiza√ß√£o
                ]

                # Filtrar o DataFrame para apenas as colunas que existem ap√≥s o pr√©-processamento
                variaveis_existentes = [col for col in variaveis_correlacao if col in df_corr.columns]

                if not variaveis_existentes:
                    st.warning("Nenhuma das vari√°veis especificadas para correla√ß√£o socioecon√¥mica foi encontrada no DataFrame. Verifique os nomes das colunas ou se elas foram criadas ap√≥s o tratamento.")
                else:
                    # Remover linhas com valores NaN para o c√°lculo da correla√ß√£o SOMENTE para as colunas selecionadas
                    df_to_corr = df_corr[variaveis_existentes].dropna()

                    if df_to_corr.empty:
                        st.warning("DataFrame para correla√ß√£o socioecon√¥mica est√° vazio ap√≥s remover NaNs nas colunas selecionadas. N√£o √© poss√≠vel calcular a correla√ß√£o.")
                    else:
                        # --- C√°lculo da Matriz de Correla√ß√£o de Spearman ---
                        matriz_correlacao = df_to_corr.corr(method='spearman')

                        # --- Gera√ß√£o do Heatmap da Matriz de Correla√ß√£o com vmin e vmax ---
                        fig_socio, ax_socio = plt.subplots(figsize=(12, 10))
                        sns.heatmap(
                            matriz_correlacao,
                            annot=True,
                            cmap='coolwarm',
                            fmt=".2f",
                            linewidths=.5,
                            vmin=-1,  # Define o valor m√≠nimo para a escala de cores como -1
                            vmax=1,   # Define o valor m√°ximo para a escala de cores como 1
                            ax=ax_socio
                        )
                        ax_socio.set_title('Matriz de Correla√ß√£o (Spearman) - Vari√°veis Socioecon√¥micas', pad=20)
                        st.pyplot(fig_socio, use_container_width=True)
                        plt.close(fig_socio) # Sempre feche a figura Matplotlib ap√≥s exibir no Streamlit

                        # Explica√ß√£o das correla√ß√µes
                        st.markdown("""
                        
                        """, unsafe_allow_html=True)
            except Exception as e:
                st.error(f"Erro ao calcular ou plotar correla√ß√µes socioecon√¥micas: {str(e)}")
                st.warning("""
                Ocorreu um erro ao processar os dados para an√°lise de correla√ß√£o socioecon√¥mica. 
                Verifique se existem vari√°veis num√©ricas ou categ√≥ricas codific√°veis no conjunto de dados, 
                e se os nomes das colunas est√£o corretos.
                """)
                # Mostrar exemplo com dados simulados para fins ilustrativos
                st.info("Exemplo ilustrativo de um heatmap de correla√ß√£o:")
                example_data = pd.DataFrame(np.random.rand(10, 5), columns=['Var A', 'Var B', 'Var C', 'Var D', 'Var E'])
                fig_ex = plt.figure(figsize=(10, 8))
                sns.heatmap(example_data.corr(), annot=True, cmap='coolwarm', vmin=-1, vmax=1)
                plt.title('Exemplo de Matriz de Correla√ß√£o')
                st.pyplot(fig_ex)
                plt.close(fig_ex)

            st.markdown("---") # Separador visual entre os heatmaps

            # --- Heatmap 2: Escolaridade e Alfabetiza√ß√£o ---
            st.subheader("Correla√ß√£o de Escolaridade e Alfabetiza√ß√£o")
            try:
                df_edu_corr = df_original.copy()

                # Substitui√ß√µes e tratamento de NaN para este subconjunto de dados
                df_edu_corr.replace('N√£o sabe', np.nan, inplace=True)
                df_edu_corr.replace('NS', np.nan, inplace=True)
                df_edu_corr.replace('nao sabe', np.nan, inplace=True)
                df_edu_corr.replace('N√£o sabe o que √©', np.nan, inplace=True)
                df_edu_corr.replace('sim', 'Sim', inplace=True)
                df_edu_corr.replace('nao', 'N√£o', inplace=True)
                df_edu_corr.replace('n√£o', 'N√£o', inplace=True)

                # --- 8. Codifica√ß√£o de N√≠vel de Escolaridade (OrdinalEncoder) ---
                categorias_escolaridade = [
                    'N√£o se alfabetizou e/ou n√£o frequentou a escola',
                    'Ensino em escola especial',
                    'Ensino infantil (pr√©-escola)',
                    'Ensino fundamental incompleto',
                    'Ensino fundamental completo',
                    'Ensino m√©dio incompleto',
                    'Ensino m√©dio completo',
                    'Ensino superior incompleto',
                    'Ensino superior completo',
                    'P√≥s-gradua√ß√£o'
                ]

                if 'N√≠vel de escolaridade do participante' in df_edu_corr.columns:
                    oe_escolaridade_part = OrdinalEncoder(categories=[categorias_escolaridade], handle_unknown='use_encoded_value', unknown_value=-1)
                    df_edu_corr['Nivel_escolaridade_participante_encoded'] = df_edu_corr['N√≠vel de escolaridade do participante'].fillna('Missing').astype(str)
                    df_edu_corr['Nivel_escolaridade_participante_encoded'] = oe_escolaridade_part.fit_transform(df_edu_corr[['Nivel_escolaridade_participante_encoded']])
                else:
                    st.warning("Aviso: Coluna 'N√≠vel de escolaridade do participante' n√£o encontrada para correla√ß√£o de educa√ß√£o.")
                    df_edu_corr['Nivel_escolaridade_participante_encoded'] = np.nan

                if 'N√≠vel de escolaridade do respons√°vel do participante' in df_edu_corr.columns:
                    oe_escolaridade_resp = OrdinalEncoder(categories=[categorias_escolaridade], handle_unknown='use_encoded_value', unknown_value=-1)
                    df_edu_corr['Nivel_escolaridade_responsavel_encoded'] = df_edu_corr['N√≠vel de escolaridade do respons√°vel do participante'].fillna('Missing').astype(str)
                    df_edu_corr['Nivel_escolaridade_responsavel_encoded'] = oe_escolaridade_resp.fit_transform(df_edu_corr[['Nivel_escolaridade_responsavel_encoded']])
                else:
                    st.warning("Aviso: Coluna 'N√≠vel de escolaridade do respons√°vel do participante' n√£o encontrada para correla√ß√£o de educa√ß√£o.")
                    df_edu_corr['Nivel_escolaridade_responsavel_encoded'] = np.nan

                # --- 9. Codifica√ß√£o de vari√°veis bin√°rias/de habilidade (LabelEncoder) ---
                variaveis_binarias_habilidade = [
                    'O participante √© alfabetizado',
                    'Sabe ler',
                    'Sabe escrever',
                    'O participante consegue interpretar texto?'
                ]

                for col in variaveis_binarias_habilidade:
                    # Normaliza o nome da coluna para evitar problemas com caracteres especiais e espa√ßos
                    encoded_col_name = col.replace('?', '').replace(' ', '_').replace('√©', 'e').replace('√ß', 'c').lower() + '_encoded'
                    if col in df_edu_corr.columns:
                        le = LabelEncoder()
                        df_edu_corr[encoded_col_name] = df_edu_corr[col].fillna('N√£o informado').astype(str)
                        df_edu_corr[encoded_col_name] = le.fit_transform(df_edu_corr[encoded_col_name])
                    else:
                        st.warning(f"Aviso: Coluna '{col}' n√£o encontrada para correla√ß√£o de educa√ß√£o.")
                        df_edu_corr[encoded_col_name] = np.nan


                # --- 10. Sele√ß√£o das vari√°veis para a matriz de correla√ß√£o ---
                variaveis_para_corr_educacao = [
                    'Nivel_escolaridade_participante_encoded',
                    'Nivel_escolaridade_responsavel_encoded',
                    'o_participante_e_alfabetizado_encoded',
                    'sabe_ler_encoded',
                    'sabe_escrever_encoded',
                    'o_participante_consegue_interpretar_texto_encoded'
                ]

                # Filtrar o DataFrame para apenas as colunas que existem no df_edu_corr final
                df_corr_educacao_filtered = df_edu_corr[[col for col in variaveis_para_corr_educacao if col in df_edu_corr.columns]].copy()

                # Remover linhas com valores NaN (para qualquer uma das colunas selecionadas)
                df_corr_educacao_filtered.dropna(inplace=True)

                # --- 11. Gerar o Heatmap da Matriz de Correla√ß√£o (Educa√ß√£o/Alfabetiza√ß√£o) ---
                if df_corr_educacao_filtered.empty:
                    st.warning("DataFrame para correla√ß√£o de educa√ß√£o/alfabetiza√ß√£o est√° vazio ap√≥s remover NaNs. N√£o √© poss√≠vel calcular a correla√ß√£o.")
                else:
                    # Mapeamento para nomes de vari√°veis mais curtos no gr√°fico
                    short_labels_map = {
                        'Nivel_escolaridade_participante_encoded': 'Esc. Part.',
                        'Nivel_escolaridade_responsavel_encoded': 'Esc. Resp.',
                        'o_participante_e_alfabetizado_encoded': 'Alfabetizado',
                        'sabe_ler_encoded': 'Sabe Ler',
                        'sabe_escrever_encoded': 'Sabe Escrever',
                        'o_participante_consegue_interpretar_texto_encoded': 'Interpreta Texto'
                    }

                    # Aplicar o mapeamento √† matriz de correla√ß√£o
                    matriz_correlacao_educacao = df_corr_educacao_filtered.corr(method='spearman')
                    matriz_correlacao_educacao.columns = [short_labels_map.get(col, col) for col in matriz_correlacao_educacao.columns]
                    matriz_correlacao_educacao.index = [short_labels_map.get(idx, idx) for idx in matriz_correlacao_educacao.index]

                    # Ajusta o tamanho da figura dinamicamente e de forma mais generosa
                    num_vars_educacao = len(matriz_correlacao_educacao.columns)
                    fig_edu, ax_edu = plt.subplots(figsize=(num_vars_educacao * 1.5, num_vars_educacao * 1.3)) # Fatores aumentados

                    sns.heatmap(
                        matriz_correlacao_educacao,
                        annot=True,
                        cmap='coolwarm',
                        fmt=".2f",
                        linewidths=.5,
                        vmin=-1,
                        vmax=1,
                        cbar_kws={'shrink': 0.8},
                        annot_kws={"fontsize": 10}, # Ajusta o tamanho da fonte das anota√ß√µes
                        ax=ax_edu
                    )
                    ax_edu.set_title('Matriz de Correla√ß√£o (Spearman) - Escolaridade e Alfabetiza√ß√£o', fontsize=14)
                    
                    # Corre√ß√£o para o erro set_ticks()
                    ax_edu.set_xticklabels(ax_edu.get_xticklabels(), rotation=45, ha='right', fontsize=10)
                    ax_edu.set_yticklabels(ax_edu.get_yticklabels(), rotation=0, fontsize=10)
                    
                    plt.tight_layout()
                    st.pyplot(fig_edu, use_container_width=True)
                    plt.close(fig_edu)

                    st.markdown("""
                
                    """, unsafe_allow_html=True)

            except Exception as e:
                st.error(f"Erro ao calcular ou plotar correla√ß√µes de educa√ß√£o/alfabetiza√ß√£o: {str(e)}")
                st.warning("""
                Ocorreu um erro ao processar os dados para an√°lise de correla√ß√£o de educa√ß√£o/alfabetiza√ß√£o. 
                Verifique se existem vari√°veis relevantes e se os nomes das colunas est√£o corretos.
                """)
                # Mostrar exemplo com dados simulados para fins ilustrativos
                st.info("Exemplo ilustrativo de um heatmap de correla√ß√£o:")
                example_data_edu = pd.DataFrame(np.random.rand(10, 3), columns=['N√≠vel Esc.', 'Sabe Ler', 'Interpreta'])
                fig_ex_edu = plt.figure(figsize=(8, 6))
                sns.heatmap(example_data_edu.corr(), annot=True, cmap='coolwarm', vmin=-1, vmax=1)
                plt.title('Exemplo de Matriz de Correla√ß√£o (Educa√ß√£o)')
                st.pyplot(fig_ex_edu)
                plt.close(fig_ex_edu)

            st.markdown("---") # Separador visual entre os heatmaps

            # --- Heatmap 4: Aspectos Demogr√°ficos e Sa√∫de (o novo heatmap) ---
            st.subheader("Correla√ß√£o de Vari√°veis Demogr√°ficas e de Sa√∫de")
            st.markdown("""
            """, unsafe_allow_html=True)
            try:
                # Criar uma c√≥pia limpa do DataFrame original para este heatmap espec√≠fico
                df_demog_saude_corr = df_original.copy()

                # --- 2. Tratamento e limpeza de dados iniciais (global) ---
                df_demog_saude_corr.replace(['N√£o sabe', 'NS', 'nao sabe', 'N√£o sabe o que √©'], np.nan, inplace=True)
                df_demog_saude_corr.replace('sim', 'Sim', inplace=True)
                df_demog_saude_corr.replace(['nao', 'n√£o'], 'N√£o', inplace=True)

                # --- 3. Processamento e Codifica√ß√£o das VARI√ÅVEIS PARA O HEATMAP ---

                # Renda familiar (OrdinalEncoder)
                if 'Renda familiar' in df_demog_saude_corr.columns:
                    categorias_renda = [
                        'At√© 1 sal√°rio m√≠nimo',
                        '1 a 2 sal√°rios m√≠nimos',
                        '2 a 3 sal√°rios m√≠nimos',
                        '3 a 4 sal√°rios m√≠nimos',
                        '4 a 5 sal√°rios m√≠nimos',
                        'Mais de 5 sal√°rios m√≠nimos'
                    ]
                    oe_renda = OrdinalEncoder(categories=[categorias_renda], handle_unknown='use_encoded_value', unknown_value=-1)
                    df_demog_saude_corr['Renda_familiar_encoded'] = df_demog_saude_corr['Renda familiar'].fillna('Missing').astype(str)
                    df_demog_saude_corr['Renda_familiar_encoded'] = oe_renda.fit_transform(df_demog_saude_corr[['Renda_familiar_encoded']])
                else:
                    st.warning("Aviso: Coluna 'Renda familiar' n√£o encontrada. Ser√° preenchida com NaN.")
                    df_demog_saude_corr['Renda_familiar_encoded'] = np.nan

                # N√≠vel de escolaridade do participante (OrdinalEncoder)
                if 'N√≠vel de escolaridade do participante' in df_demog_saude_corr.columns:
                    categorias_escolaridade = [
                        'N√£o se alfabetizou e/ou n√£o frequentou a escola',
                        'Ensino em escola especial',
                        'Ensino infantil (pr√©-escola)',
                        'Ensino fundamental incompleto',
                        'Ensino fundamental completo',
                        'Ensino m√©dio incompleto',
                        'Ensino m√©dio completo',
                        'Ensino superior incompleto',
                        'Ensino superior completo',
                        'P√≥s-gradua√ß√£o'
                    ]
                    oe_escol_participante = OrdinalEncoder(categories=[categorias_escolaridade], handle_unknown='use_encoded_value', unknown_value=-1)
                    df_demog_saude_corr['Nivel_escolaridade_participante_encoded'] = df_demog_saude_corr['N√≠vel de escolaridade do participante'].fillna('Missing').astype(str)
                    df_demog_saude_corr['Nivel_escolaridade_participante_encoded'] = oe_escol_participante.fit_transform(df_demog_saude_corr[['Nivel_escolaridade_participante_encoded']])
                else:
                    st.warning("Aviso: Coluna 'N√≠vel de escolaridade do participante' n√£o encontrada. Ser√° preenchida com NaN.")
                    df_demog_saude_corr['Nivel_escolaridade_participante_encoded'] = np.nan

                # N√≠vel de escolaridade do respons√°vel do participante (OrdinalEncoder)
                if 'N√≠vel de escolaridade do respons√°vel do participante' in df_demog_saude_corr.columns:
                    oe_escol_responsavel = OrdinalEncoder(categories=[categorias_escolaridade], handle_unknown='use_encoded_value', unknown_value=-1)
                    df_demog_saude_corr['Nivel_escolaridade_responsavel_encoded'] = df_demog_saude_corr['N√≠vel de escolaridade do respons√°vel do participante'].fillna('Missing').astype(str)
                    df_demog_saude_corr['Nivel_escolaridade_responsavel_encoded'] = oe_escol_responsavel.fit_transform(df_demog_saude_corr[['Nivel_escolaridade_responsavel_encoded']])
                else:
                    st.warning("Aviso: Coluna 'N√≠vel de escolaridade do respons√°vel do participante' n√£o encontrada. Ser√° preenchida com NaN.")
                    df_demog_saude_corr['Nivel_escolaridade_responsavel_encoded'] = np.nan


                # Idade em que a m√£e do participante teve a gesta√ß√£o (Num√©rica)
                if 'Idade em que a m√£e do participante teve a gesta√ß√£o' in df_demog_saude_corr.columns:
                    df_demog_saude_corr['Idade_mae_gestacao'] = pd.to_numeric(df_demog_saude_corr['Idade em que a m√£e do participante teve a gesta√ß√£o'], errors='coerce')
                else:
                    st.warning("Aviso: Coluna 'Idade em que a m√£e do participante teve a gesta√ß√£o' n√£o encontrada. Ser√° preenchida com NaN.")
                    df_demog_saude_corr['Idade_mae_gestacao'] = np.nan

                # Realizou o acompanhamento pr√© natal na rede (One-Hot Encoding)
                if 'Realizou o acompanhamento pr√© natal na rede:' in df_demog_saude_corr.columns:
                    df_demog_saude_corr['Pre_natal_rede_temp'] = df_demog_saude_corr['Realizou o acompanhamento pr√© natal na rede:'].fillna('N√£o informado').astype(str)
                    df_demog_saude_corr = pd.get_dummies(df_demog_saude_corr, columns=['Pre_natal_rede_temp'], prefix='PreNatalRede', dummy_na=False)
                else:
                    st.warning("Aviso: Coluna 'Realizou o acompanhamento pr√© natal na rede:' n√£o encontrada. Nenhuma coluna de pr√©-natal ser√° criada.")

                # Cor/etnia do participante (One-Hot Encoding)
                if 'Cor/etnia do participante' in df_demog_saude_corr.columns:
                    df_demog_saude_corr['Cor_etnia_participante_temp'] = df_demog_saude_corr['Cor/etnia do participante'].fillna('N√£o informado').astype(str)
                    df_demog_saude_corr = pd.get_dummies(df_demog_saude_corr, columns=['Cor_etnia_participante_temp'], prefix='CorEtnia', dummy_na=False)
                else:
                    st.warning("Aviso: Coluna 'Cor/etnia do participante' n√£o encontrada.")

                # Pratica alguma atividade f√≠sica ou esporte (LabelEncoder)
                if 'Pratica alguma atividade f√≠sica ou esporte' in df_demog_saude_corr.columns:
                    le_atividade_fisica = LabelEncoder()
                    df_demog_saude_corr['Atividade_fisica_encoded'] = df_demog_saude_corr['Pratica alguma atividade f√≠sica ou esporte'].fillna('N√£o informado').astype(str)
                    df_demog_saude_corr['Atividade_fisica_encoded'] = le_atividade_fisica.fit_transform(df_demog_saude_corr['Atividade_fisica_encoded'])
                else:
                    st.warning("Aviso: Coluna 'Pratica alguma atividade f√≠sica ou esporte' n√£o encontrada. Ser√° preenchida com NaN.")
                    df_demog_saude_corr['Atividade_fisica_encoded'] = np.nan

                # --- 4. Sele√ß√£o das vari√°veis para a matriz de correla√ß√£o ---
                variaveis_para_corr_demog_saude = [
                    'Renda_familiar_encoded',
                    'Nivel_escolaridade_participante_encoded',
                    'Nivel_escolaridade_responsavel_encoded',
                    'Idade_mae_gestacao',
                    'Atividade_fisica_encoded'
                ]

                # Adicionar as colunas one-hot encoded de Cor/Etnia e Pr√©-Natal criadas dinamicamente
                colunas_coretnia_dummy_demog = [col for col in df_demog_saude_corr.columns if col.startswith('CorEtnia_')]
                colunas_prenatal_dummy_demog = [col for col in df_demog_saude_corr.columns if col.startswith('PreNatalRede_')]
                variaveis_para_corr_demog_saude.extend(colunas_coretnia_dummy_demog)
                variaveis_para_corr_demog_saude.extend(colunas_prenatal_dummy_demog)

                # Filtrar o DataFrame para apenas as colunas que realmente existem ap√≥s o processamento
                df_corr_demog_saude = df_demog_saude_corr[[col for col in variaveis_para_corr_demog_saude if col in df_demog_saude_corr.columns]].copy()
                
                # NOVO: Verificar e remover colunas com apenas NaNs ou vari√¢ncia zero
                cols_to_drop_demog_saude = []
                for col in df_corr_demog_saude.columns:
                    is_all_null = df_corr_demog_saude[col].isnull().all()
                    has_zero_variance = df_corr_demog_saude[col].nunique() <= 1

                    if is_all_null:
                        st.warning(f"Aviso: Coluna '{col}' cont√©m apenas NaNs e ser√° removida do c√°lculo da correla√ß√£o para o heatmap de demogr√°ficos/sa√∫de.")
                        cols_to_drop_demog_saude.append(col)
                    elif has_zero_variance and not is_all_null:
                        st.warning(f"Aviso: Coluna '{col}' tem vari√¢ncia zero (todos os valores s√£o iguais) e ser√° removida do c√°lculo da correla√ß√£o para o heatmap de demogr√°ficos/sa√∫de.")
                        cols_to_drop_demog_saude.append(col)

                if cols_to_drop_demog_saude:
                    df_corr_demog_saude.drop(columns=cols_to_drop_demog_saude, inplace=True)
                
                # Remover linhas com valores NaN restantes para o c√°lculo da correla√ß√£o
                df_corr_demog_saude.dropna(inplace=True)

                # --- 5. Gerar o Heatmap da Matriz de Correla√ß√£o ---
                if df_corr_demog_saude.empty:
                    st.warning("DataFrame para correla√ß√£o de aspectos demogr√°ficos e sa√∫de est√° vazio ap√≥s remover NaNs. N√£o √© poss√≠vel calcular a correla√ß√£o. Verifique se h√° dados suficientes nas vari√°veis selecionadas.")
                else:
                    # Mapeamento para nomes de vari√°veis mais curtos no gr√°fico
                    short_labels_map_demog_saude = {
                        'Renda_familiar_encoded': 'Renda Familiar',
                        'Nivel_escolaridade_participante_encoded': 'Escolaridade Part.',
                        'Nivel_escolaridade_responsavel_encoded': 'Escolaridade Resp.',
                        'Idade_mae_gestacao': 'Idade M√£e Gest.',
                        'Atividade_fisica_encoded': 'Ativ. F√≠sica',
                        # Mapeamentos para One-Hot Encoding de Cor/Etnia
                        'CorEtnia_Branca': 'Etnia Branca',
                        'CorEtnia_Preta': 'Etnia Preta',
                        'CorEtnia_Parda': 'Etnia Parda',
                        'CorEtnia_Amarela': 'Etnia Amarela',
                        'CorEtnia_Ind√≠gena': 'Etnia Ind√≠gena',
                        'CorEtnia_N√£o informado': 'Etnia N√£o Info',
                        # Mapeamentos para One-Hot Encoding de Pr√©-Natal
                        'PreNatalRede_privada': 'Pr√©-Natal Priv.',
                        'PreNatalRede_publica': 'Pr√©-Natal P√∫b.',
                        'PreNatalRede_n√£o realizou': 'Pr√©-Natal N√£o Real.',
                        'PreNatalRede_N√£o informado': 'Pr√©-Natal N√£o Info',
                    }

                    # Calcula a matriz de correla√ß√£o de Spearman
                    matriz_correlacao_demog_saude = df_corr_demog_saude.corr(method='spearman')

                    # Aplica o mapeamento aos r√≥tulos da matriz
                    matriz_correlacao_demog_saude.columns = [short_labels_map_demog_saude.get(col, col) for col in matriz_correlacao_demog_saude.columns]
                    matriz_correlacao_demog_saude.index = [short_labels_map_demog_saude.get(idx, idx) for idx in matriz_correlacao_demog_saude.index]

                    # Ajusta o tamanho da figura e fontes para melhor visualiza√ß√£o
                    num_vars_demog_saude = len(matriz_correlacao_demog_saude.columns)
                    fig_demog_saude, ax_demog_saude = plt.subplots(figsize=(num_vars_demog_saude * 0.9, num_vars_demog_saude * 0.8))

                    sns.heatmap(
                        matriz_correlacao_demog_saude,
                        annot=True,
                        cmap='coolwarm',
                        fmt=".2f",
                        linewidths=.5,
                        vmin=-1,
                        vmax=1,
                        cbar_kws={'shrink': 0.8},
                        annot_kws={"fontsize": 7},
                        ax=ax_demog_saude
                    )
                    ax_demog_saude.set_title('Matriz de Correla√ß√£o (Spearman) - Aspectos Demogr√°ficos e Sa√∫de', fontsize=12)
                    
                    # Corre√ß√£o para o erro set_ticks()
                    ax_demog_saude.set_xticklabels(ax_demog_saude.get_xticklabels(), rotation=45, ha='right', fontsize=8)
                    ax_demog_saude.set_yticklabels(ax_demog_saude.get_yticklabels(), rotation=0, fontsize=8)
                    
                    plt.tight_layout()
                    st.pyplot(fig_demog_saude, use_container_width=True)
                    plt.close(fig_demog_saude)

    


            except Exception as e:
                st.error(f"Erro ao calcular ou plotar correla√ß√µes demogr√°ficas e de sa√∫de: {str(e)}")
                st.warning("""
                Ocorreu um erro ao processar os dados para an√°lise de correla√ß√£o de aspectos demogr√°ficos e sa√∫de. 
                Verifique se existem vari√°veis relevantes e se os nomes das colunas est√£o corretos, especialmente para One-Hot Encoding.
                """)
                st.info("Exemplo ilustrativo de um heatmap de correla√ß√£o:")
                example_data_demog_saude = pd.DataFrame(np.random.rand(10, 5), columns=['Renda', 'Esc. Part.', 'IMC', 'Etnia', 'Ativ. F√≠sica'])
                fig_ex_demog_saude = plt.figure(figsize=(10, 8))
                sns.heatmap(example_data_demog_saude.corr(), annot=True, cmap='coolwarm', vmin=-1, vmax=1)
                plt.title('Exemplo de Matriz de Correla√ß√£o (Demogr√°ficos e Sa√∫de)')
                st.pyplot(fig_ex_demog_saude)
                plt.close(fig_ex_demog_saude)   

            st.markdown("---") # Separador visual entre os heatmaps

        # --- ABA 8: PCA e Cluster ---
        with tab8:
            st.header("PCA e Cluster")
            
            st.markdown("""
            <div class="justified-text">
            Esta se√ß√£o apresenta a an√°lise de redu√ß√£o de dimensionalidade (PCA) e os 
            resultados da clusteriza√ß√£o dos dados. Essas t√©cnicas ajudam a identificar 
            padr√µes e agrupamentos naturais nos dados.
            </div>
            """, unsafe_allow_html=True)
            
            # An√°lise PCA
            st.subheader("An√°lise de Componentes Principais (PCA)")
            # ======================
            # SELE√á√ÉO DE VARI√ÅVEIS
            # ======================
            variaveis = [
                'Idade do participante',
                'Idade do cuidador principal',
                'IMC',
                'Peso do participante', 
                'Altura do participante',
                'Idade em que a m√£e do participante teve a gesta√ß√£o'
            ]
            
            # ======================
            # PR√â-PROCESSAMENTO
            # ======================
            with st.expander("Pr√©-processamento dos Dados", expanded=True):
                # Carregar dados (substitua por seu DataFrame)
                
                # Preencher NA com medianas
                df_para_analise = df_original[variaveis].copy()
                for col in variaveis:
                    df_para_analise[col] = df_para_analise[col].fillna(df_para_analise[col].median())
                
                st.success(f"Dados pr√©-processados com sucesso! Total de participantes: {len(df_para_analise)}")
                
                # Mostrar estat√≠sticas b√°sicas
                if st.checkbox("Mostrar estat√≠sticas descritivas"):
                    st.dataframe(df_para_analise.describe())
            
            # ======================
            # AN√ÅLISE PCA E CLUSTERS
            # ======================
            with st.expander("An√°lise de Clusters", expanded=True):
                # Widget para selecionar n√∫mero de clusters
                n_clusters = st.slider("N√∫mero de Clusters", 2, 5, 3)
                
                # Normaliza√ß√£o e PCA
                scaler = StandardScaler()
                dados_normalizados = scaler.fit_transform(df_para_analise)
                
                pca = PCA(n_components=2)
                componentes = pca.fit_transform(dados_normalizados)
                var_exp = pca.explained_variance_ratio_ * 100
                
                # K-Means
                kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
                clusters = kmeans.fit_predict(componentes)
                df_para_analise['Cluster'] = clusters
                
                # ======================
                # VISUALIZA√á√ïES
                # ======================
                st.subheader("Visualiza√ß√£o dos Clusters (PCA)")
                fig1, ax1 = plt.subplots(figsize=(8,6))
                sns.scatterplot(
                    x=componentes[:, 0], y=componentes[:, 1],
                    hue=clusters, palette='Set2', s=100, ax=ax1
                )
                ax1.set_title(f'Clusters via PCA + K-Means (k={n_clusters})')
                ax1.set_xlabel(f'PC1 ({var_exp[0]:.1f}% vari√¢ncia)')
                ax1.set_ylabel(f'PC2 ({var_exp[1]:.1f}% vari√¢ncia)')
                ax1.grid(True)
                st.pyplot(fig1)

                st.subheader("M√©dias por Cluster")
                fig2, ax2 = plt.subplots(figsize=(10,6))
                df_melted = df_para_analise.melt(
                    id_vars='Cluster', 
                    value_vars=variaveis,
                    var_name='Vari√°vel', 
                    value_name='Valor'
                )
                sns.barplot(
                    data=df_melted, 
                    x='Vari√°vel', 
                    y='Valor', 
                    hue='Cluster', 
                    palette='Set2', 
                    errorbar=None,
                    ax=ax2
                )
                ax2.set_title('M√©dias das Vari√°veis por Cluster')
                ax2.set_ylabel('Valor M√©dio')
                ax2.tick_params(axis='x', rotation=45)
                plt.tight_layout()
                st.pyplot(fig2)

            # ======================
            # AN√ÅLISE DE ATIVIDADE F√çSICA POR CLUSTER
            # ======================
            with st.expander("An√°lise de Atividade F√≠sica por Cluster", expanded=True):
                # Juntar clusters com dados originais
                df_clusterizado = df_original.copy()
                df_clusterizado['Cluster'] = df_para_analise['Cluster']
                
                # Selecionar coluna de atividade f√≠sica
                col_atividade = st.selectbox(
                    "Selecione a coluna de atividade f√≠sica:",
                    options=[col for col in df_original.columns if 'atividade' in col.lower() or 'esporte' in col.lower()],
                    index=0
                )
                
                if col_atividade:
                    # Filtrar apenas casos com informa√ß√£o de atividade f√≠sica
                    df_atividade = df_clusterizado[df_clusterizado[col_atividade].notna()]
                    
                    # Tabelas cruzadas
                    st.subheader("Distribui√ß√£o de Atividade F√≠sica por Cluster")
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        # Tabela de contagem absoluta
                        tabela_cruzada = pd.crosstab(df_atividade['Cluster'], df_atividade[col_atividade])
                        st.markdown("**Contagem absoluta**")
                        st.dataframe(tabela_cruzada.style.background_gradient(cmap='Blues'))
                    
                    with col2:
                        # Tabela percentual
                        tabela_percentual = tabela_cruzada.div(tabela_cruzada.sum(axis=1), axis=0) * 100
                        st.markdown("**Percentual por cluster (%)**")
                        st.dataframe(tabela_percentual.round(1).style.background_gradient(cmap='Greens'))
                    
                    # Gr√°fico de barras empilhadas
                    st.subheader("Distribui√ß√£o Percentual")
                    fig3, ax3 = plt.subplots(figsize=(10,6))
                    tabela_percentual.plot(kind='bar', stacked=True, colormap='Set2', ax=ax3)
                    ax3.set_title('Pr√°tica de Atividade F√≠sica por Cluster')
                    ax3.set_ylabel('% de participantes')
                    ax3.set_xlabel('Cluster')
                    ax3.legend(title=col_atividade, bbox_to_anchor=(1.05, 1), loc='upper left')
                    plt.tight_layout()
                    st.pyplot(fig3)
                    
                    # Teste Qui-Quadrado (opcional)
                    if st.checkbox("Realizar teste de associa√ß√£o (Qui-Quadrado)"):
                        try:
                            chi2, p_valor, dof, expected = chi2_contingency(tabela_cruzada)
                            
                            st.markdown(f"""
                            **Resultados do Teste Qui-Quadrado:**
                            - Estat√≠stica qui-quadrado: `{chi2:.4f}`
                            - p-valor: `{p_valor:.4f}`
                            - Graus de liberdade: `{dof}`
                            """)
                            
                            if p_valor < 0.05:
                                st.success("üîç **Resultado:** Existe associa√ß√£o significativa entre clusters e atividade f√≠sica (p < 0.05)")
                            else:
                                st.warning("üîç **Resultado:** N√ÉO h√° associa√ß√£o significativa entre clusters e atividade f√≠sica (p ‚â• 0.05)")
                        
                        except Exception as e:
                            st.error(f"Erro ao calcular o teste qui-quadrado: {str(e)}")
                else:
                    st.warning("Nenhuma coluna de atividade f√≠sica encontrada. Verifique os nomes das colunas.")
            
            # ======================
            # ESTAT√çSTICAS POR CLUSTER
            # ======================
            with st.expander("Estat√≠sticas Detalhadas por Cluster", expanded=False):
                tabs = st.tabs(["M√©dias", "Medianas", "Tamanhos"])
                
                with tabs[0]:
                    st.dataframe(
                        df_para_analise.groupby('Cluster')[variaveis].mean().style.background_gradient(cmap='Blues')
                    )
                
                with tabs[1]:
                    st.dataframe(
                        df_para_analise.groupby('Cluster')[variaveis].median().style.background_gradient(cmap='Greens')
                    )
                
                with tabs[2]:
                    cluster_counts = df_para_analise['Cluster'].value_counts().sort_index()
                    st.dataframe(cluster_counts)
                    fig4, ax4 = plt.subplots(figsize=(6,4))
                    sns.barplot(x=cluster_counts.index, y=cluster_counts.values, palette='Set2')
                    ax4.set_title('Distribui√ß√£o dos Clusters')
                    ax4.set_xlabel('Cluster')
                    ax4.set_ylabel('N√∫mero de Participantes')
                    st.pyplot(fig4)

            # ======================
            # AN√ÅLISE DE PERCEP√á√ÉO DE ATENDIMENTO
            # ======================
            with st.expander("An√°lise de Percep√ß√£o de Atendimento de Sa√∫de", expanded=True):
                col_atividade = 'Voc√™ considera que o participante possui atendimento de sa√∫de adequado pelo sistema p√∫blico para atender suas necessidades'
                
                if col_atividade in df_original.columns:
                    # 1. Preparar dados
                    df_clusterizado_cat = df_para_analise.copy()
                    df_clusterizado_cat[col_atividade] = df_original[col_atividade]
                    
                    # 2. Padronizar respostas
                    df_clusterizado_cat[col_atividade] = (
                        df_clusterizado_cat[col_atividade]
                        .fillna('N√£o')
                        .astype(str)
                        .str.strip()
                        .str.lower()
                        .apply(lambda x: 'Sim' if x in ['sim', 'sim.'] else 'N√£o')
                    )
                    
                    # 3. Tabelas cruzadas
                    st.subheader("Distribui√ß√£o por Cluster")
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        tabela_cruzada = pd.crosstab(df_clusterizado_cat['Cluster'], df_clusterizado_cat[col_atividade])
                        st.markdown("**Contagem absoluta**")
                        st.dataframe(tabela_cruzada.style.background_gradient(cmap='Blues'))
                    
                    with col2:
                        tabela_percentual = tabela_cruzada.div(tabela_cruzada.sum(axis=1), axis=0) * 100
                        st.markdown("**Percentual por cluster (%)**")
                        st.dataframe(tabela_percentual.round(1).style.background_gradient(cmap='Greens'))
                    
                    # 4. Gr√°ficos
                    st.subheader("Visualiza√ß√µes")
                    
                    tab1, tab2 = st.tabs(["Gr√°fico Empilhado", "Gr√°fico Lado a Lado"])
                    
                    with tab1:
                        fig3, ax3 = plt.subplots(figsize=(10,6))
                        tabela_percentual[['Sim', 'N√£o']].plot(kind='bar', stacked=True, colormap='Set2', ax=ax3)
                        ax3.set_title('Percep√ß√£o de Atendimento de Sa√∫de por Cluster')
                        ax3.set_ylabel('% de participantes')
                        ax3.set_xlabel('Cluster')
                        ax3.legend(title='Resposta', bbox_to_anchor=(1.05, 1), loc='upper left')
                        plt.tight_layout()
                        st.pyplot(fig3)
                    
                    with tab2:
                        fig4, ax4 = plt.subplots(figsize=(10,6))
                        tabela_percentual[['Sim', 'N√£o']].plot(kind='bar', stacked=False, color=['#66c2a5', '#fc8d62'], ax=ax4)
                        ax4.set_title('Percep√ß√£o de Atendimento de Sa√∫de por Cluster')
                        ax4.set_ylabel('% de participantes')
                        ax4.set_xlabel('Cluster')
                        ax4.legend(title='Resposta')
                        ax4.grid(axis='y', linestyle='--', alpha=0.6)
                        plt.tight_layout()
                        st.pyplot(fig4)
                    
                    # 5. Teste Qui-Quadrado
                    st.subheader("Teste de Associa√ß√£o Estat√≠stica")
                    chi2, p_valor, dof, expected = chi2_contingency(tabela_cruzada)
                    
                    st.markdown(f"""
                    **Resultados do Teste Qui-Quadrado:**
                    - Estat√≠stica qui-quadrado: `{chi2:.4f}`
                    - p-valor: `{p_valor:.4f}`
                    - Graus de liberdade: `{dof}`
                    """)
                    
                    if p_valor < 0.05:
                        st.success("üîç **Resultado:** Existe diferen√ßa estatisticamente significativa entre os clusters na percep√ß√£o de atendimento (p < 0.05)")
                    else:
                        st.warning("üîç **Resultado:** N√ÉO h√° diferen√ßa estatisticamente significativa entre os clusters na percep√ß√£o de atendimento (p ‚â• 0.05)")
                    
                    st.markdown("**Frequ√™ncias esperadas (se n√£o houvesse associa√ß√£o):**")
                    st.dataframe(pd.DataFrame(expected, index=tabela_cruzada.index, columns=tabela_cruzada.columns))
                    
                else:
                    st.error(f"Coluna '{col_atividade}' n√£o encontrada no DataFrame. Verifique o nome da vari√°vel.")
            
            # ======================
            # ESTAT√çSTICAS POR CLUSTER
            # ======================
            with st.expander("Estat√≠sticas Detalhadas por Cluster", expanded=False):
                tabs = st.tabs(["M√©dias", "Medianas", "Tamanhos"])
                
                with tabs[0]:
                    st.dataframe(
                        df_para_analise.groupby('Cluster')[variaveis].mean().style.background_gradient(cmap='Blues')
                    )
                
                with tabs[1]:
                    st.dataframe(
                        df_para_analise.groupby('Cluster')[variaveis].median().style.background_gradient(cmap='Greens')
                    )
                
                with tabs[2]:
                    cluster_counts = df_para_analise['Cluster'].value_counts().sort_index()
                    st.dataframe(cluster_counts)
                    fig5, ax5 = plt.subplots(figsize=(6,4))
                    sns.barplot(x=cluster_counts.index, y=cluster_counts.values, palette='Set2')
                    ax5.set_title('Distribui√ß√£o dos Clusters')
                    ax5.set_xlabel('Cluster')
                    ax5.set_ylabel('N√∫mero de Participantes')
                    st.pyplot(fig5)

        
        # --- ABA 9: Regress√£o e Random Forest ---
        with tab9:
            st.header("Modelos Preditivos: Regress√£o e Random Forest")
            
            st.markdown("""
            <div style="text-align: justify">
            Esta se√ß√£o apresenta modelos preditivos para an√°lise dos dados, incluindo regress√£o linear 
            para problemas de predi√ß√£o num√©rica e Random Forest para classifica√ß√£o.
            </div>
            """, unsafe_allow_html=True)
            
            # Fun√ß√£o para verificar vari√°veis v√°lidas para regress√£o
            def get_valid_regression_targets(df):
                valid_targets = []
                numeric_cols = df.select_dtypes(include=['number']).columns.tolist()
                
                for col in numeric_cols:
                    # Verificar se tem valores suficientes e vari√¢ncia
                    if df[col].nunique() > 5 and df[col].notna().sum() > 20:
                        valid_targets.append(col)
                
                return valid_targets
            
            # Fun√ß√£o para verificar vari√°veis v√°lidas para classifica√ß√£o
            def get_valid_classification_targets(df):
                valid_targets = []
                
                # Considerar colunas categ√≥ricas e bin√°rias num√©ricas
                cat_cols = df.select_dtypes(include=['object', 'category']).columns.tolist()
                binary_num_cols = [col for col in df.select_dtypes(include=['number']) 
                                  if df[col].nunique() == 2 and df[col].notna().sum() > 20]
                
                for col in cat_cols + binary_num_cols:
                    # Verificar se tem pelo menos 2 classes com amostras suficientes
                    value_counts = df[col].value_counts()
                    if len(value_counts) >= 2 and all(value_counts > 5):
                        valid_targets.append(col)
                
                return valid_targets
            
            # Obter vari√°veis v√°lidas
            valid_reg_targets = get_valid_regression_targets(df_filtrado)
            valid_clf_targets = get_valid_classification_targets(df_filtrado)
            
            # Mostrar apenas se houver vari√°veis v√°lidas
            if not valid_reg_targets and not valid_clf_targets:
                st.warning("Nenhuma vari√°vel alvo adequada encontrada para modelagem.")
            else:
                # Divis√£o em duas colunas para sele√ß√£o de par√¢metros
                col1, col2 = st.columns(2)
                
                with col1:
                    if valid_reg_targets:
                        # Selecionar vari√°vel alvo para regress√£o
                        target_reg = st.selectbox(
                            "Selecione a vari√°vel alvo para regress√£o:",
                            options=valid_reg_targets,
                            index=0
                        )
                    else:
                        st.warning("Nenhuma vari√°vel num√©rica adequada para regress√£o encontrada.")
                
                with col2:
                    if valid_clf_targets:
                        # Selecionar vari√°vel alvo para classifica√ß√£o
                        target_clf = st.selectbox(
                            "Selecione a vari√°vel alvo para classifica√ß√£o:",
                            options=valid_clf_targets,
                            index=0
                        )
                    else:
                        st.warning("Nenhuma vari√°vel categ√≥rica adequada para classifica√ß√£o encontrada.")
                
                # Divis√£o em abas para cada modelo
                tab_reg, tab_clf = st.tabs(["An√°lise de Regress√£o", "Random Forest"])
                
                # ABA DE REGRESS√ÉO
                with tab_reg:
                    if valid_reg_targets:
                        st.subheader(f"An√°lise de Regress√£o para: {target_reg}")
                        
                        try:
                            import statsmodels.api as sm
                            from sklearn.preprocessing import LabelEncoder
                            
                            # Preparar dados para regress√£o
                            df_reg = df_filtrado.copy()
                            
                            # Selecionar features automaticamente (todas as num√©ricas exceto a target)
                            numeric_features = [col for col in df_filtrado.select_dtypes(include=['number']).columns 
                                              if col != target_reg and df_filtrado[col].notna().sum() > 20]
                            
                            if len(numeric_features) > 0:
                                # Processar dados
                                df_reg = df_reg[[target_reg] + numeric_features].dropna()
                                
                                if len(df_reg) > 30:  # M√≠nimo de 30 observa√ß√µes
                                    X = df_reg[numeric_features]
                                    y = df_reg[target_reg]
                                    
                                    # Adicionar constante para o intercepto
                                    X = sm.add_constant(X)
                                    
                                    # Ajustar modelo
                                    model = sm.OLS(y, X).fit()
                                    
                                    # Exibir resultados
                                    st.write("### Resumo do Modelo")
                                    
                                    # Criar duas colunas para m√©tricas
                                    m1, m2 = st.columns(2)
                                    with m1:
                                        st.metric("R¬≤ Ajustado", f"{model.rsquared_adj:.3f}")
                                    with m2:
                                        st.metric("Valor F", f"{model.fvalue:.1f}", f"p-valor: {model.f_pvalue:.4f}")
                                    
                                    # Mostrar coeficientes em tabela
                                    st.write("### Coeficientes do Modelo")
                                    coef_df = pd.DataFrame({
                                        'Vari√°vel': model.params.index,
                                        'Coeficiente': model.params.values,
                                        'p-valor': model.pvalues.values
                                    })
                                    st.dataframe(
                                        coef_df.style.format({'Coeficiente': '{:.4f}', 'p-valor': '{:.4f}'})
                                        .apply(lambda x: ['background-color: #ffcccc' if x['p-valor'] > 0.05 else '' for i in x], axis=1)
                                    )
                                    
                                    # Gr√°ficos de diagn√≥stico
                                    st.write("### Diagn√≥stico do Modelo")
                                    
                                    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
                                    
                                    # Gr√°fico de res√≠duos
                                    ax1.scatter(model.predict(), model.resid, alpha=0.6, color='#4e79a7')
                                    ax1.axhline(y=0, color='r', linestyle='--')
                                    ax1.set_title('Res√≠duos vs Valores Preditos')
                                    ax1.set_xlabel('Valores Preditos')
                                    ax1.set_ylabel('Res√≠duos')
                                    
                                    # QQ-plot
                                    sm.qqplot(model.resid, line='s', ax=ax2)
                                    ax2.set_title('QQ-Plot dos Res√≠duos')
                                    
                                    st.pyplot(fig)
                                    plt.close(fig)
                                    
                                else:
                                    st.warning(f"Dados insuficientes ap√≥s limpeza (apenas {len(df_reg)} observa√ß√µes v√°lidas).")
                            else:
                                st.warning("Nenhuma feature num√©rica adequada encontrada para a regress√£o.")
                                
                        except Exception as e:
                            st.error(f"Erro na regress√£o: {str(e)}")
                    else:
                        st.warning("Nenhuma vari√°vel alvo v√°lida selecionada para regress√£o.")
                
                # ABA DE CLASSIFICA√á√ÉO
                with tab_clf:
                    if valid_clf_targets:
                        st.subheader(f"Modelo Random Forest para: {target_clf}")
                        
                        try:
                            from sklearn.ensemble import RandomForestClassifier
                            from sklearn.model_selection import train_test_split
                            from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
                            from sklearn.preprocessing import LabelEncoder
                            
                            # Preparar dados
                            df_clf = df_filtrado.copy()
                            
                            # Codificar target
                            le = LabelEncoder()
                            df_clf[target_clf] = le.fit_transform(df_clf[target_clf].astype(str))
                            
                            # Selecionar features (todas as num√©ricas com dados suficientes)
                            numeric_features = [col for col in df_filtrado.select_dtypes(include=['number']).columns 
                                              if col != target_clf and df_filtrado[col].notna().sum() > 20]
                            
                            if len(numeric_features) > 0:
                                df_clf = df_clf[[target_clf] + numeric_features].dropna()
                                
                                if len(df_clf) > 30:  # M√≠nimo de 30 observa√ß√µes
                                    X = df_clf[numeric_features]
                                    y = df_clf[target_clf]
                                    
                                    # Verificar balanceamento
                                    class_balance = pd.Series(y).value_counts(normalize=True)
                                    st.write(f"**Distribui√ß√£o das classes:** {', '.join([f'{le.classes_[i]}: {p:.1%}' for i, p in class_balance.items()])}")
                                    
                                    # Dividir dados com stratifica√ß√£o
                                    X_train, X_test, y_train, y_test = train_test_split(
                                        X, y, test_size=0.3, random_state=42, stratify=y
                                    )
                                    
                                    # Configura√ß√£o do modelo
                                    st.write("### Configura√ß√£o do Modelo")
                                    n_estimators = st.slider("N√∫mero de √°rvores", 10, 200, 100, key='n_estimators')
                                    max_depth = st.slider("Profundidade m√°xima", 2, 20, 5, key='max_depth')
                                    
                                    # Treinar modelo
                                    model = RandomForestClassifier(
                                        n_estimators=n_estimators,
                                        max_depth=max_depth,
                                        random_state=42,
                                        class_weight='balanced' if any(p < 0.3 for p in class_balance) else None
                                    )
                                    model.fit(X_train, y_train)
                                    
                                    # Avalia√ß√£o
                                    y_pred = model.predict(X_test)
                                    accuracy = accuracy_score(y_test, y_pred)
                                    
                                    # Mostrar m√©tricas
                                    st.write("### Desempenho do Modelo")
                                    
                                    col1, col2 = st.columns(2)
                                    with col1:
                                        st.metric("Acur√°cia", f"{accuracy:.2%}")
                                    
                                    with col2:
                                        st.metric("Classes", len(le.classes_))
                                    
                                    # Relat√≥rio de classifica√ß√£o
                                    st.write("### Relat√≥rio Detalhado")
                                    report = classification_report(
                                        y_test, y_pred, 
                                        target_names=le.classes_, 
                                        output_dict=True
                                    )
                                    st.dataframe(pd.DataFrame(report).transpose().style.background_gradient(cmap='Blues'))
                                    
                                    # Matriz de confus√£o
                                    st.write("### Matriz de Confus√£o")
                                    cm = confusion_matrix(y_test, y_pred)
                                    
                                    fig, ax = plt.subplots(figsize=(8, 6))
                                    sns.heatmap(
                                        cm, annot=True, fmt='d', 
                                        cmap='Blues',
                                        xticklabels=le.classes_,
                                        yticklabels=le.classes_,
                                        ax=ax
                                    )
                                    ax.set_xlabel('Predito')
                                    ax.set_ylabel('Real')
                                    ax.set_title('Matriz de Confus√£o')
                                    st.pyplot(fig)
                                    plt.close(fig)
                                    
                                    # Import√¢ncia das features
                                    st.write("### Import√¢ncia das Vari√°veis")
                                    importance = pd.DataFrame({
                                        'Vari√°vel': numeric_features,
                                        'Import√¢ncia': model.feature_importances_
                                    }).sort_values('Import√¢ncia', ascending=False)
                                    
                                    fig2, ax2 = plt.subplots(figsize=(10, 6))
                                    sns.barplot(
                                        x='Import√¢ncia', 
                                        y='Vari√°vel', 
                                        data=importance.head(10),  # Mostrar apenas as top 10
                                        palette='viridis',
                                        ax=ax2
                                    )
                                    ax2.set_title('Top 10 Vari√°veis Mais Importantes')
                                    st.pyplot(fig2)
                                    plt.close(fig2)
                                    
                                else:
                                    st.warning(f"Dados insuficientes ap√≥s limpeza (apenas {len(df_clf)} observa√ß√µes v√°lidas).")
                            else:
                                st.warning("Nenhuma feature num√©rica adequada encontrada para o modelo.")
                                
                        except Exception as e:
                            st.error(f"Erro no Random Forest: {str(e)}")
                    else:
                        st.warning("Nenhuma vari√°vel alvo v√°lida selecionada para classifica√ß√£o.")
        
        # --- ABA 10: Discuss√£o e Conclus√£o ---
        with tab10:
            st.header("Discuss√£o e Conclus√£o")
            st.markdown("""
             
Os dados apresentados no gr√°fico de distribui√ß√£o por faixa et√°ria cont√©m uma amostra com predom√≠nio de pessoas com S√≠ndrome de Down (SD) mais jovens, as categorias 5 meses a 10 anos possui 44,1% da distribui√ß√£o e em segundo lugar a categoria 11 a 19 anos com 28,9% dessa demografia. Essa distribui√ß√£o de uma faixa et√°ria mais jovem √© devido √† natureza da pesquisa que foi aplicada em Centros de atendimento √† Pessoas com S√≠ndrome de Down, Centros Paral√≠mpicos de atletas com SD e institui√ß√µes filantr√≥picas e ONGs que trabalham no desenvolvimento dessa popula√ß√£o. Em rela√ß√£o as caracter√≠sticas √©tnicas raciais, a amostra reflete um predom√≠nio de 77,4% pessoas autodeclaradas brancas e 15,5% pardas. Analisando esses dois gr√°ficos conseguimos notar um ponto limitante da amostra, a falta de diversidade seja pela faixa et√°ria ou pela cor/etnia, uma vez que um dos objetivos  do projeto √© avaliar caracter√≠sticas sociodemogr√°ficas de pessoas com SD no Brasil. Ao olhar para o heatmap de "Aspectos Demogr√°ficos e de Sa√∫de" podemos obersavar uma correla√ß√£o negativa mesmo que fraca entre renda familiar e cor parda (-0.21) e renda familiar e cor preta (0.16). Esses achados de renda familir verus cor/etnia refletem as desiguldades socioecon√¥micas hist√≥ricas e estruturais no Brasil, onde popula√ß√µes pretas e pardas enfretam maior risco a vulnerabilidade social e econ√¥mica.

O gr√°fico sobre o n√∫mero de irm√£os que o participante possui aponta que 43,1% possui pelo menos 1 irm√£o. Trazendo dados da literatura, um estudo realizado na Fl√≥rida (Marshall et al., 2019), relata por parte dos pais a falta de ter recebido informa√ß√µes adequadas ap√≥s o diagn√≥stico de um filho com S√≠ndrome de Down, seja durante o per√≠odo pr√©-natal ou no p√≥s-natal. Em se tratando de pa√≠ses subdesenvolvidos essa problem√°tica pode ser ainda pior e com uma realidade e perspectiva mais dura. N√£o √© dif√≠cil encontrar uma sobrecarga dos cuidados reca√≠da sobre a m√£e, que na maioria das vezes precisa administrar os cuidados entre os filhos e outras demandas familiares. Ao aplicar a pesquisa foi observado, em sua grande maioria, crian√ßas com SD sendo levadas para as atividades di√°rias por suas m√£es que em seus relatos apontavam a dificuldade em conseguir conciliar as obriga√ß√µes do dia a dia.

A distribui√ß√£o da renda familiar parece assim√©trica para as faixas de renda mais altas, sendo 40,1% dos participantes terem uma renda de mais de 5 sal√°rios m√≠nimos. Isso √© refor√ßado no heatmap de "Vari√°veis Socioecon√¥micas" em que h√° uma correla√ß√£o negativa moderada (-0.53) entre renda familiar e receber o Benef√≠cio e Preta√ß√£o Continuada (BPC). Esse dado implica numa menor representa√ß√£o em rendas m√©dias-baixas. Al√©m disso, 4,6% dos participantes disseram receber o Bolsa Fam√≠lia e 16,3% recebem o BPC. Ainda no mesmo heatmap houve uma correla√ß√£o positiva fraca (0.36) entre receber o Bolsa Fam√≠lia e receber o BPC. A distribui√ß√£o do tipo de moradia demonstrou que 68,8% dos participantes possuem moradia pr√≥pria e 19,8% possuem moradia alugada. A realidade brasileira ainda √© vista por sua alta concentra√ß√£o de renda, onde apenas 1% da popula√ß√£o det√©m de 28,3% da renda total o que reflete sobre as desigualdades sociais (IPEA, 2023). Em se tratando de pessoas com S√≠ndrome de Down e suas fam√≠lia existe uma subnotifica√ß√£o n√£o apenas dos aspectos sociodemogr√°ficos, mas em tantos outros que investigamos nessa pesquisa. A realidade da grande maioria dessas fam√≠lias n√£o necessariamente est√° refletida nos 40,1% computados, mas sim nos relatos de pais em dizer que depender dos aux√≠lios era algo comum, principalmente quando a pesquisa era aplicada em institui√ß√µes que atendiam pessoas de baixa renda. Algumas m√£es relataram a necessidade de abdicar do emprego para cuidar de seus filhos de forma integral e que o aux√≠lio era a √∫nica renda familiar.

Em rela√ß√£o ao n√≠vel de escolaridade dos participantes houve um predom√≠nio de baixos n√≠veis de escolaridade. 34,1% disseram ter Ensino Fundamental incompleto e 14,4% n√£o se alfabetizaram e/ou n√£o frequentaram a escola. Ainda que a amostra contenha um predom√≠nio de pessoas na faixa et√°ria de 5 meses a 10 anos (44,1%), 52,8% n√£o s√£o alfabetizados e 26,8% s√£o semi alfabetizados, isso mesmo entre as faixas et√°rias adultas. Embora no heatmap de "Vari√°veis Socioecon√¥micas" exista uma correla√ß√£o positiva moderada (0.56) entre idade do participante e se o participante √© alfabetizado e o heatamp de "Escolaridade e Alfabetiza√ß√£o" apresente fortes correla√ß√µes positivas entre as vari√°veis √© preciso levantar um questionamento. A realidade escolar e de qualifica√ß√£o profissional entre pessoas com SD e outras defici√™ncias intelectuais √© de enfrentamento de barreiras significativas, seja no acesso √† informa√ß√£o, emprego, autonomia e participa√ß√£o social. Isso √© reflexo tanto da falta de acessibilidade e inclus√£o nos mais diversos √¢mbitos da vida,  na falta de suporte e pol√≠ticas p√∫blicas que garantem acesso √† educa√ß√£o de qualidade, o despreparo de profissionais para atender esse p√∫blico e tamb√©m a superprote√ß√£o e desinforma√ß√£o por parte do cuidador. O direito a educa√ß√£o inclusiva e equitativa deve ser estabelecido nas institui√ß√µes. Pessoas com S√≠ndrome de Down possuem necessidades educacionais variadas, o apoio adequado, o sentimento de pertencimento √† comunidade e o suporte de autonomia garantida s√£o alavancas que podem fazer o indiv√≠duo com SD prosperar n√£o apenas na vida acad√™mica, mas em outros aspectos da vida (Boundy et al., 2023). Ainda sobre escolaridade e alfabetiza√ß√£o, 64,6% dos participantes n√£o sabe ler e 62,4% n√£o sabe escrever e 93,3% n√£o consegue interpretar texto. O baixo letramento funcional reflete o acesso limitado √† educa√ß√£o e isso implicando em uma vulnerabilidade educacional exigindo planejamento e estrat√©gias pol√≠ticas que atendam as necessidade espec√≠ficas dessa popula√ß√£o.
Quanto ao n√≠vel de escolaridade do respons√°vel do participante 33,8% disseram ter P√≥s-gradua√ß√£o e 27,5%  tem Ensino Superior completo. Esse dado reafirma o status socioecon√¥mico da amostra e tamb√©m conversa com outro dado que ser√° apresentado na discuss√£o, "Idade em que a m√£e teve a gesta√ß√£o".

Analisando o gr√°fico da idade em que a m√£e teve a gesta√ß√£o, majoritariamente a concentra√ß√£o est√° na faixa et√°ria 36-40 anos (42,3%). Isso pode estar associado na decis√£o de ter filhos ap√≥s uma estabilidade socioecon√¥mica e planejamento familiar refor√ßando o perfil socioecon√¥mico da amostra. Em rela√ß√£o ao acompanhamento pr√©-natal 66,9% disseram ter realizado na rede privada, dado consistente com o perfil de renda familiar e escolaridade do respons√°vel. Esses achados s√£o refor√ßados no heatmap de "Aspectos Demogr√°ficos e Sa√∫de" ao encontrar uma correla√ß√£o positiva fraca a moderada (0.41) entre pr√©-natal na rede privada e renda familiar. De forma geral, em rela√ß√£o as redes de acompanhamento (nutricionista, oftalmologista, psic√≥logo, cl√≠nico geral, dentista) a rede privada √© a mais utilizada. As especialidades menos utilizadas s√£o o acompanhamento com nutricionista e psic√≥logo e aqui √© poss√≠vel apontar uma problem√°tica na sa√∫de, pois pessoas com SD s√£o mais suscet√≠veis a desenvolverem comorbidades, dist√∫rbios cardiovasculares, colesterol alto, obesidade, dist√∫rbio da tireoide e outras doen√ßas (Asua et al., 2015). Al√©m disso, esse p√∫blico requer um acompanhamento psicol√≥gico por terem um comprometimento cognitivo, em aprendizagem, mem√≥ria, linguagem e fun√ß√£o cognitiva. Em nossa amostra, a preval√™ncia de diagn√≥stico teve a ansiedade como predominante (12%). A realiza√ß√£o de interven√ß√£o precoce seja pela rede privada (45,5%) ou pela p√∫blica (35,1%) refor√ßa a necessidade de especialistas (fisioterapeutas, fonoaudi√≥logos, terapeuta ocupacional) capacitados para atender esse p√∫blico, principalmente na rede p√∫blica, onde a demanda √© grande e a espera por vaga no atendimento tamb√©m.

Quanto ao diagn√≥stico do participante, 78,2% tiveram no p√≥s-natal, sugerindo que embora o acompanhamento pr√©-natal seja realizado o diagn√≥stico de doen√ßas gen√©ticas acaba sendo tardio. Al√©m disso, 93,7% dos participantes realizaram o exame de cari√≥tipo. Este estudo aponta que m√©todos de triagem n√£o invasiva s√£o cruciais na estimativa do risco individual de uma gravidez cromoss√¥mica afetada tanto em mulheres jovens quanto em mulheres mais velhas. No entanto, apenas o diagn√≥stico invasivo pr√©-natal √© definitivo da S√≠ndrome de Down e aconselhamento gen√©tico apropriado (Viƒçiƒá et al., 2017). A combina√ß√£o de fatores como a escolha ou n√£o de realiza o pr√©-natal, ultrassonografia morfol√≥gica n√£o precisa, caracter√≠sticas f√≠sicas do beb√™ n√£o t√£o evidentes ao nascimento e a necessidade de exames complementares contribuem para um diagn√≥stico definitivo no p√≥s-natal.
Em rela√ß√£o ao irm√£o ter ou n√£o alguma defici√™ncia 98,1% disseram n√£o ter defici√™ncia, podendo indicar que a SD n√£o √© amplamente recorrente nas fam√≠lias da amostra.

Sobre a percep√ß√£o do cuidador em rela√ß√£o √† sa√∫de em geral do participante, 50,7% disseram ser boa e 37,6% disseram ser excelente. Ao aplicar a pesquisa, alguns cuidadores relataram ter uma percep√ß√£o positiva da sa√∫de geral de seu filho mesmo considerando a condi√ß√£o gen√©tica e as comorbidades associadas, e muitas vezes comparando com outras crian√ßas que tem S√≠ndrome de Down ou que fazem uso regular de medica√ß√µes.

Em rela√ß√£o ao IMC, a classifica√ß√£o foi realizada de acordo com a Organiza√ß√£o Mundial da Sa√∫de e da Sociedade Brasileira de Pediatria quando a faixa et√°ria era de 0 meses a 10 anos devido a curva do Z escore. Ao somar as porcentagens das categorias sobrepeso e obesidades, 47,1% do sexo feminino e 43,8% do sexo masculino est√£o nessas classifica√ß√µes. Esse dado implica em um problema de sa√∫de p√∫blica ainda mais quando o dado conversa com o gr√°fico de acompanhamento nutricional em que 66,9% disseram n√£o realizar.

A distribui√ß√£o de imuniza√ß√µes/vacinas entre os participantes apresenta uma alta cobertura para aquelas vacinas do calend√°rio infantil anual b√°sico. A cobertura se torna baixa para vacina da varicela, HPV, dengue e principalmente da Covid-19. Aqui vale um coment√°rio, durante a aplica√ß√£o da pesquisa houve grande resist√™ncia em obter informa√ß√µes sobre a vacina da Covid-19, al√©m disso foi relatado uma grande desinforma√ß√£o √† respeito da vacina. Infelizmente alguns cuidadores acreditam que a vacina n√£o √© ben√©fica √† sa√∫de de seus filhos, outros apontam que ela √© causadora de outra enfermidades mesmo tendo evid√™ncias cient√≠ficas de que pessoas com S√≠ndrome de Down possuem uma baixa imunidade quando comparadas a seus pares, podendo ser consideradas imunossuprimidas devido a altera√ß√µes no sistema imunol√≥gico o que as torna mais suscept√≠veis a infec√ß√µes e doen√ßas autoimunes (Ram et al., 2011).
A baixa taxa de casos de covid grave ou que n√£o tiveram covid-19 pode ser reflexo de maior ades√£o das 1¬™ e 2¬™ doses da vacina, mas tamb√©m pode ser pela n√£o detec√ß√£o da doen√ßa no per√≠odo da pandemia ou mesmo na omiss√£o do caso na hora de responder o question√°rio.

Entre as doen√ßas mais contra√≠das apesar das imuniza√ß√µes, a pneumonia foi a mais frequente com 33% da amostra, sendo que este dado refor√ßa a maior suscetibilidade dessa popula√ß√£o em contrair infec√ß√µes respirat√≥rias, seja pelas diferen√ßas anat√¥mica das vias a√©reas ou um sistema imunol√≥gico mais comprometido. Vale ressaltar que a vacina pneumoc√≥cica conjugada foi relativamente recente introduzida no calend√°rio b√°sico de imuniza√ß√£o do Brasil, no ano de 2010, antes disso ela era direcionada apenas aos idosos.
As morbidades mais prevalentes foram dist√∫rbio da tireoide (18%), altera√ß√µes visuais (17,2%) e altera√ß√µes cardiovasculares/malforma√ß√µes card√≠acas (17%). Mapear as morbidades mais prevalentes √© demonstrar os desafios de sa√∫de p√∫blica e seu acesso.

Em rela√ß√£o ao uso de medica√ß√µes pelos participantes 41,4% fazem suplementa√ß√£o de vitamina D e 30% tomam algum repositor hormonal da tireoide. Pessoas com SD podem desenvolver hipotireoidismo cong√™nito. Um estudo de Gorini et al (2024)
mostra que a concentra√ß√£o baixa ou anormal de T4 ao nascer pode impactar na vida fetal e neonatal, uma vez que os horm√¥nios tireoidianos desempenham papel fundamental no desenvolvimento do c√©rebro e sua defici√™ncia contribui para a defici√™ncia intelectual em pessoas com SD o que influ√™ncia no crescimento som√°tico e desenvolvimento psicomotor.


A percep√ß√£o dos cuidadores em rela√ß√£o ao h√°bitos saud√°veis dos participantes, 90,7% relatam que seus filhos possuem uma alimenta√ß√£o saud√°vel, no entanto,
este dado contrasta com o gr√°fico de alta preval√™ncia de sobrepeso e obesidade entre os participantes discutido anteriormente. Al√©m disso a obesidade pode ser influenciada por fatores metab√≥licos intr√≠nsecos √† S√≠ndrome de Down o que refor√ßa a necessidade de acompanhamento nutricional.

Os gr√°ficos de atividade f√≠sica e frequ√™ncia semanal praticada mostram que 37,9% dos participantes n√£o praticam e entre √†queles que praticam a maioria pratica de 2 a 3 vezes na semana. Embora 62,1% declarem praticar alguma atividade f√≠sica ou esporte, pode ser que a frequ√™ncia ainda n√£o seja o ideal para todos. Manter-se ativo √© importante n√£o apenas para o controle de peso, visto os dados de IMC dessa amostra, mas tamb√©m por uma quest√£o de sa√∫de geral  de uma popula√ß√£o com predisposi√ß√£o √† obesidade e outras comorbidades (Xanthopoulos et al., 2023).

O gr√°fico de atendimento de sa√∫de p√∫blico adequado mostrou que 70% dos cuidadores acham que seus filhos n√£o o recebem. Esse dado √© cr√≠tico considerando que a maioria dos participantes possui acesso √† rede privada. A percep√ß√£o negativa ao sistema p√∫blico de sa√∫de aponta fragilidades no atendimento feito pelo SUS. Por se tratar de um p√∫blico em vulnerabilidade, desigualdade e dificuldade em acessibilidade, o setor p√∫blico precisa tra√ßar estrat√©gias pol√≠ticas que atendam n√£o apenas as demandas dessa popula√ß√£o, mas que tenha um olhar de integralidade nos aspectos de sa√∫de, educa√ß√£o e sociodemogr√°ficos. O direito √† sa√∫de p√∫blica de qualidade precisa ser garantido, mais ainda o respeito e a liberdade de ter autonomia e participa√ß√£o numa sociedade que precisar rever esse olhar capacitista.

Em rela√ß√£o aos aspectos de autonomia, participa√ß√£o e intera√ß√£o social, no gr√°fico de autonomia, 54,5% disseram que seus filhos tem autonomia para escolher coisas para sua satisfa√ß√£o pessoal. Em rela√ß√£o a se deslocar independentemente pela cidade 91,3% disseram que n√£o. 51,2% √© parcialmente independente na realiza√ß√£o de suas atividade em geral. 91% se relaciona com diferentes pessoas e tem amigos. 77,1% interagem socialmente frequentando diferentes lugares da cidade e bairro. 77,1% dos cuidadores tem uma percep√ß√£o positiva e acreditam que seus filhos s√£o tratados com respeito, dignidade e igualdade pelas outras pessoas. √â preciso lembrar que maior parte da faixa et√°ria dessa amostra est√° entre 5 meses e 10 anos, logo n√£o seria poss√≠vel se descolar sozinho pela cidade, contudo, ainda que na vida adulta, pessoas com S√≠ndrome de Down durante o curso da vida acabam sendo pouco estimuladas a ter sua autonomia, isso gera uma depend√™ncia e superprote√ß√£o do cuidador o que implica na sua socializa√ß√£o e desenvolvimento. Ter uma rede de apoio √© importante e ter sua independ√™ncia e autonomia estimuladas √© essencial para desenvolvimento de habilidades seja na capacidade de tomar decis√µes, resolver problemas, desenvolver autoconhecimento e capacidade de comunica√ß√£o e intera√ß√£o social. Embora a percep√ß√£o do cuidador achar que seu filho √© tratado com respeito e dignidade, foi relato que em alguns casos isso ocorre porque ainda s√£o beb√™s ou crian√ßas, que ao passar para a adolesc√™ncia muitos sofrem preconceito e discrimina√ß√£o por parte de colegas nas escolas. Essa reflex√£o importante, pois como mencionados vivemos em uma sociedade capacitista e desigual. Achar que pelo indiv√≠duo ter o diagn√≥stico de S√≠ndrome de Down sua vida resume a uma  cren√ßa de que ele √© incapaz devido √†s sua defici√™ncias √© uma atitude discriminat√≥rias. Educar e ensinar as crian√ßas de que todos s√£o capazes de desenvolver habilidades, seja qual for, independente de suas limita√ß√µes, √© um exerc√≠cio de cidadania. Oportunizar, incentivar e acolher as limita√ß√µes √© diminuir as barreiras f√≠sicas, sociais e institucionais enfrentadas diariamente pelas pessoas com S√≠ndrome de Down.

Ao analisar o gr√°fico de dispers√£o dos resultados da an√°lise de agrupamento usando K-means ap√≥s uma redu√ß√£o de dimens√µes por PCA (PC1 + PC2 explicam 79,5% da vari√¢ncia total dos dados), observamos o agrupamento em 3 clusters considerando as vari√°veis "idade do participante", "idade do cuidador principal", "IMC", "peso do participante", "altura do participante" e "idade em que a m√£e do participante teve a gesta√ß√£o":

Cluster 0 - Jovens adultos/adultos com IMC alto:
A idade m√©dia dos participantes √© aproximadamente 27 anos. 
A idade do cuidador √© aproximadamente 62 anos (pais mais velhos no grupo). 
IMC de 28,2kg/m¬≤ (sobrepeso). 
Altura de 1,54m. 
Peso de 68kg
Idade materna na gesta√ß√£o entre 38-39 anos
- Este cluster representa um grupo de adultos jovens com sobrepeso, sob cuidado de pessoas mais velhas. Pode ser que os indiv√≠duos tenham um grau maior de depend√™ncia ou vulnerabilidade f√≠sica divido os pais terem mais idade.

Cluster 1 - Crian√ßas
Idade m√©dia dos participantes de aproximadamente 3,7 anos
Idade do cuidador principal de aproximadamente 42 anos
IMC de 19,88kg/m¬≤ (eutrofia para faixa et√°ria infantil)
Altura de 94cm
Peso de 15kg
Idade materna na gesta√ß√£o entre 30-31 anos
- Este cluster representa um grupo de crian√ßas que tem cuidadores adultos na faixa et√°ria dos 40 anos. √â esperado um perfil de depend√™ncia da inf√¢ncia e uma demanda de cuidados completos no dia a dia.

Cluster 2 - Pr√©-adolescentes/adolescentes
Idade m√©dia do participante de aproximadamente 13,6 anos
Idade do cuidador principal de 49 anos
IMC de 22,9kg/m¬≤ (eutrofia)
Altura de 1,40m
Peso de 43kg
Idade materna na gesta√ß√£o entre 35-36 anos
- Este cluster representa um grupo de adolescentes ou pr√©-adolescentes com IMC compat√≠vel para a idade. Os cuidadores s√£o pais mais jovens (pais e m√£e de meia idade) quando comparado com os pais do cluster 0. √â poss√≠vel que este seja um grupo de pessoa com SD com maior independ√™ncia funcional e autonomia quando comparado ao cluster 1.

O gr√°fico de distribui√ß√£o da pr√°tica de atividade f√≠sica temos:

Cluster 0 ‚Äì Jovens adultos/adultos com IMC alto
39,2% fazem atividade 2 a 3 vezes/semana
26,4% fazem 4 a 5 vezes/semana
Apenas 20% n√£o praticam atividade
- Este grupo √© o mais ativo fisicamente. Apesar do IMC mais alto (sobrepeso), eles t√™m uma alta taxa de pr√°tica regular, sugerindo que est√£o mais conscientes da sa√∫de ou com maior autonomia.

Cluster 1 ‚Äì Crian√ßas 
65,1% n√£o praticam atividade f√≠sica
Apenas 1,6% praticam 4 a 5 vezes/semana
- Grupo altamente sedent√°rio, o que √© esperado, considerando a idade m√©dia de ~3 anos. Muitas crian√ßas dessa idade ainda n√£o t√™m uma rotina estruturada de atividades f√≠sicas ou dependem totalmente de adultos para isso.

Cluster 2 ‚Äì Pr√©-adolescentes/adolescentes
41,6% praticam 2 a 3 vezes/semana
10,6% praticam 4 a 5 vezes/semana
25,7% n√£o praticam
- Este grupo apresenta um padr√£o intermedi√°rio com uma maior autonomia que as crian√ßas, mas menos ativos que os adultos do cluster 0. Pode refletir fatores como falta de incentivo e oportunidade, quest√µes sociais, limita√ß√µes cognitivas/motoras, falta de acessibilidade.

O gr√°fico de distribui√ß√£o da percep√ß√£o de atendimento de sa√∫de p√∫blica por cluster tem os seguintes achados:

Cluster 0 ‚Äì Jovens adultos/adultos
45,6% dos cuidadores avaliam que o atendimento pelo sistema p√∫blico de sa√∫de √© adequado, este √© o maior percentual entre os grupos. Ainda assim, mais da metade (54,4%) consideram o atendimento inadequado (N√£o). √â poss√≠vel que apesar do sobrepeso identificado nesse grupo, este seja o que mais reconhece acesso ou qualidade no SUS. Provavelmente s√£o usu√°rios mais experientes do sistema, com certa autonomia e/ou consci√™ncia de seus direitos.

Cluster 1 ‚Äì Crian√ßas 
Apenas 18,6% disseram ter acesso a atendimento de qualidade pelo sistema p√∫blico de sa√∫de, ou seja, mais de 80% dos respons√°veis n√£o consideram o atendimento adequado. √â poss√≠vel que haja dificuldade dos cuidadores em conseguir atendimento especializado em demandas, por exemplo, fisioterapia, fonoaudi√≥logo, terapeuta ocupacional, psic√≥logo. Al√©m disso, o diagn√≥stico precoce ou terapias cont√≠nuas para crian√ßas com defici√™ncia pode ser uma barreira enfrentada no dia a dia.

Cluster 2 ‚Äì Pr√©-adolescentes/adolescentes
Apenas 24,8% avaliaram positivamente o atendimento. A percep√ß√£o dos cuidadores parece um pouco melhor comparado ao cluster 1, contudo a maioria ainda √© negativa. √â poss√≠vel que haja lacunas em acompanhamento longitudinal e de integralidade seja na reabilita√ß√£o ou transi√ß√£o para a vida adulta.


Refer√™ncias:

Marshall, J., Ramakrishnan, R., Slotnick, A. L., Tanner, J. P., Salemi, J. L., & Kirby, R. S. (2019). Family-Centered Perinatal Services for Children With Down Syndrome and Their Families in Florida. Journal of obstetric, gynecologic, and neonatal nursing : JOGNN, 48(1), 78‚Äì89. https://doi.org/10.1016/j.jogn.2018.10.006

MONTFERRE, Helio. Estudos revelam impacto da redistribui√ß√£o de renda no Brasil. Ipea, 4 ago. 2023. Dispon√≠vel em: https://www.ipea.gov.br/portal/categorias/45-todas-as-noticias/noticias/13909-estudos-revelam-impacto-da-redistribuicao-de-renda-no-brasil. Acesso em: 24 jun. 2025.

Boundy, L., Hargreaves, S., Baxter, R., Holton, S., & Burgoyne, K. (2023). Views of educators working with pupils with Down syndrome on their roles and responsibilities and factors related to successful inclusion. Research in developmental disabilities, 142, 104617. https://doi.org/10.1016/j.ridd.2023.104617

Viƒçiƒá, A., Hafner, T., Bekavac Vlatkoviƒá, I., Koraƒá, P., Habek, D., & Stipoljev, F. (2017). Prenatal diagnosis of Down syndrome: A 13-year retrospective study. Taiwanese journal of obstetrics & gynecology, 56(6), 731‚Äì735. https://doi.org/10.1016/j.tjog.2017.10.004

Ram, G., & Chinen, J. (2011). Infections and immunodeficiency in Down syndrome. Clinical and experimental immunology, 164(1), 9‚Äì16. https://doi.org/10.1111/j.1365-2249.2011.04335.x

Gorini, F., Coi, A., Pierini, A., Assanta, N., Bottoni, A., & Santoro, M. (2024). Hypothyroidism in Patients with Down Syndrome: Prevalence and Association with Congenital Heart Defects. Children (Basel, Switzerland), 11(5), 513. https://doi.org/10.3390/children11050513

Xanthopoulos, M. S., Walega, R., Xiao, R., Pipan, M. E., Cochrane, C. I., Zemel, B. S., Kelly, A., & Magge, S. N. (2023). Physical Activity in Youth with Down Syndrome and Its Relationship with Adiposity. Journal of developmental and behavioral pediatrics : JDBP, 44(6), e436‚Äìe443. https://doi.org/10.1097/DBP.0000000000001192

            """, unsafe_allow_html=True)

            
            st.markdown("""
            <div class="justified-text">
            <h3>Principais Achados</h3>
            <p>Os resultados deste estudo revelaram padr√µes importantes nas caracter√≠sticas 
            sociais, educacionais e de sa√∫de da popula√ß√£o com s√≠ndrome de Down no Brasil:</p>
            <ul>
                <li><strong>Caracter√≠sticas Sociodemogr√°ficas</strong>: A maioria dos participantes se concentra na faixa et√°ria X, com predomin√¢ncia de Y no g√™nero.</li>
                <li><strong>Acesso a Benef√≠cios</strong>: Z% dos participantes recebem BPC, indicando a import√¢ncia desse benef√≠cio para a popula√ß√£o estudada.</li>
                <li><strong>Sa√∫de</strong>: As morbidades mais prevalentes foram A e B, com C% dos participantes fazendo uso regular de medica√ß√µes.</li>
                <li><strong>Educa√ß√£o</strong>: D% dos participantes s√£o alfabetizados, com E% frequentando escolas regulares.</li>
            </ul>
            
            <h3>Implica√ß√µes</h3>
            <p>Estes achados t√™m importantes implica√ß√µes para pol√≠ticas p√∫blicas e pr√°ticas 
            cl√≠nicas:</p>
            <ul>
                <li><strong>Pol√≠ticas de Sa√∫de</strong>: Necessidade de ampliar o acesso a especialidades m√©dicas como F e G.</li>
                <li><strong>Educa√ß√£o Inclusiva</strong>: Import√¢ncia de fortalecer programas de inclus√£o escolar e apoio pedag√≥gico.</li>
                <li><strong>Assist√™ncia Social</strong>: Refor√ßar a divulga√ß√£o e acesso a benef√≠cios como o BPC e outros programas sociais.</li>
            </ul>
            
            <h3>Limita√ß√µes</h3>
            <p>Algumas limita√ß√µes do estudo devem ser consideradas:</p>
            <ul>
                <li><strong>Amostra</strong>: Os participantes foram recrutados principalmente atrav√©s de H, o que pode limitar a generaliza√ß√£o.</li>
                <li><strong>Dados Autorrelatados</strong>: Algumas informa√ß√µes dependem da percep√ß√£o dos cuidadores, podendo haver vi√©s.</li>
                <li><strong>Vari√°veis N√£o Inclu√≠das</strong>: Fatores como I e J n√£o foram avaliados neste estudo.</li>
            </ul>
            
            <h3>Sugest√µes para Pesquisas Futuras</h3>
            <p>Estudos futuros poderiam:</p>
            <ul>
                <li>Investigar a rela√ß√£o entre K e L utilizando m√©todos longitudinais.</li>
                <li>Incluir medidas objetivas de M para complementar os dados autorrelatados.</li>
                <li>Explorar as diferen√ßas regionais no acesso a servi√ßos e benef√≠cios.</li>
            </ul>
            
            <h3>Conclus√£o</h3>
            <p>Este estudo fornece um panorama abrangente das caracter√≠sticas da popula√ß√£o com 
            s√≠ndrome de Down no Brasil, destacando √°reas priorit√°rias para interven√ß√£o e 
            pesquisa futura. Os resultados refor√ßam a necessidade de pol√≠ticas intersetoriais 
            que abordem as m√∫ltiplas dimens√µes da vida desses indiv√≠duos.</p>
            </div>
            """, unsafe_allow_html=True)

# --- Chamada Principal para Rodar o Dashboard ---
# Certifique-se de que a vari√°vel caminho_do_arquivo est√° definida corretamente acima
# Exemplo: caminho_do_arquivo = 'C:/Users/Emille/Documents/UNIFESP/MAT√âRIAS/T√≥picos em Ci√™ncia de Dados para Neuroci√™ncia/Projeto5/Banco_SD.xlsx'

# Chamada CORRETA da fun√ß√£o load_data:
df_original = df_original = load_data()
create_dashboard(df_original)